"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[438],{6262:(e,i)=>{i.A=(e,i)=>{const a=e.__vccOpts||e;for(const[e,n]of i)a[e]=n;return a}},4779:(e,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>s});var n=a(641);const t=[(0,n.Fv)('<h1 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h1><p>哈希表（Hash Table），也称为散列表，是一种数据结构，它可以提供非常快速的数据插入和查找操作。哈希表通过一个称为哈希函数（Hash Function）的算法，将键（Key）转换为数组索引，从而能够快速定位到数据的存储位置。</p><p>在哈希表中，每个键值对（Key-Value Pair）都被哈希函数映射到表中的一个位置，以便快速访问。但是，由于不同的键可能会被映射到同一个位置，这就产生了所谓的哈希冲突（Hash Collision）。为了解决冲突，有几种方法可以使用，如链地址法（Chaining）和开放地址法（Open Addressing）。</p><p>链地址法是在冲突发生的索引处使用链表来存储所有映射到该索引的元素。而开放地址法则是寻找另一个空闲的位置来存储冲突的元素。</p><p>哈希表的性能很大程度上取决于哈希函数的设计和冲突解决机制的效率。设计良好的哈希表可以在接近 O(1) 的时间复杂度内完成插入和查找操作，这使得哈希表成为一种非常高效的数据结构。</p><p>​</p><h2 id="c-stl-之-哈希表" tabindex="-1"><a class="header-anchor" href="#c-stl-之-哈希表"><span>C++ STL 之 哈希表</span></a></h2><h3 id="如何使用stl库中的哈希表" tabindex="-1"><a class="header-anchor" href="#如何使用stl库中的哈希表"><span>如何使用STL库中的哈希表</span></a></h3><p>（1）导入头文件   #include&lt;unordered_map&gt; （2）哈希表的声明和初始化     1）声明</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;elemType_1, elemType_2&gt; var_name; //声明一个没有任何元素的哈希表，\n//其中elemType_1和elemType_2是模板允许定义的类型，如要定义一个键值对都为Int的哈希表：\nunordered_map&lt;int, int&gt; map;\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）初始化     以上在声明哈希表的时候并没有给unordered_map传递任何参数，因此调用的是unordered_map的默认构造函数，生成一个空容器。初始化主要有一下几种方式：      a）在定义哈希表的时候通过初始化列表中的元素初始化:</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\n//如果知道要创建的哈希表的元素个数时，也可以在初始化列表中指定元素个数\nunordered_map&lt;int, int&gt; hmap{ {{1,10},{2,12},{3,13}},3 };\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b）通过下标运算来添加元素:</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>//当我们想向哈希表中添加元素时也可以直接通过下标运算符添加元素，格式为: mapName[key]=value;\n//如：hmap[4] = 14;\n//但是这样的添加元素的方式会产生覆盖的问题，也就是当hmap中key为4的存储位置有值时，\n//再用hmap[4]=value添加元素，会将原哈希表中key为4存储的元素覆盖\nhmap[4] = 14;\nhmap[4] = 15;\ncout &lt;&lt; hmap[4];  //结果为15\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>c）通过insert()函数来添加元素:</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>//通过insert()函数来添加元素的结果和通过下标来添加元素的结果一样，不同的是insert()可以避免覆盖问题，\n//insert()函数在同一个key中插入两次，第二次插入会失败\nhmap.insert({ 5,15 });\nhmap.insert({ 5,16 });\ncout &lt;&lt; hmap[5];  //结果为15\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>d）复制构造，通过其他已初始化的哈希表来初始新的表:</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\nunordered_map&lt;int, int&gt; hmap1(hmap);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stl中哈希表的常用函数" tabindex="-1"><a class="header-anchor" href="#stl中哈希表的常用函数"><span>STL中哈希表的常用函数</span></a></h3><p>(1) begin( )函数：该函数返回一个指向哈希表开始位置的迭代器</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt;::iterator iter = hmap.begin(); //申请迭代器，并初始化为哈希表的起始位置\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot;:&quot; &lt;&lt; iter-&gt;second;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(2) end( )函数：作用于begin函数相同，返回一个指向哈希表结尾位置的下一个元素的迭代器</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt;::iterator iter = hmap.end();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(3) cbegin() 和 cend()：这两个函数的功能和begin()与end()的功能相同，唯一的区别是cbegin()和cend()是面向不可变的哈希表</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>const unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\nunordered_map&lt;int, int&gt;::const_iterator iter_b = hmap.cbegin(); //注意这里的迭代器也要是不可变的const_iterator迭代器\nunordered_map&lt;int, int&gt;::const_iterator iter_e = hmap.cend();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(4) empty()函数：判断哈希表是否为空，空则返回true，非空返回false</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>bool isEmpty = hmap.empty();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(5) size()函数：返回哈希表的大小</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int size = hmap.size();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(6) erase()函数： 删除某个位置的元素，或者删除某个位置开始到某个位置结束这一范围内的元素， 或者传入key值删除键值对</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\nunordered_map&lt;int, int&gt;::iterator iter_begin = hmap.begin();\nunordered_map&lt;int, int&gt;::iterator iter_end = hmap.end();\nhmap.erase(iter_begin);  //删除开始位置的元素\nhmap.erase(iter_begin, iter_end); //删除开始位置和结束位置之间的元素\nhmap.erase(3); //删除key==3的键值对\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(7) at()函数：根据key查找哈希表中的元素</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\nint elem = hmap.at(3);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(8) clear()函数：清空哈希表中的元素</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>hmap.clear()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(9) find()函数：以key作为参数寻找哈希表中的元素，如果哈希表中存在该key值则返回该位置上的迭代器，否则返回哈希表最后一个元素下一位置上的迭代器</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\nunordered_map&lt;int, int&gt;::iterator iter;\niter = hmap.find(2); //返回key==2的迭代器，可以通过iter-&gt;second访问该key对应的元素\nif(iter != hmap.end())  cout &lt;&lt; iter-&gt;second;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(10) bucket()函数：以key寻找哈希表中该元素的储存的bucket编号（unordered_map的源码是基于拉链式的哈希表，所以是通过一个个bucket存储元素）</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int pos = hmap.bucket(key);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(11) bucket_count()函数：该函数返回哈希表中存在的存储桶总数（一个存储桶可以用来存放多个元素，也可以不存放元素，并且bucket的个数大于等于元素个数）</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int count = hmap.bucket_count();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(12) count()函数： 统计某个key值对应的元素个数， 因为unordered_map不允许重复元素，所以返回值为0或1</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int count = hmap.count(key);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(13) 哈希表的遍历: 通过迭代器遍历</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>unordered_map&lt;int, int&gt; hmap{ {1,10},{2,12},{3,13} };\nunordered_map&lt;int, int&gt;::iterator iter = hmap.begin();\nfor( ; iter != hmap.end(); iter++){\n cout &lt;&lt; &quot;key: &quot; &lt;&lt;  iter-&gt;first  &lt;&lt; &quot;value: &quot; &lt;&lt;  iter-&gt;second &lt;&lt;endl;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>————————————————</p><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n</code></pre><p>原文链接：https://blog.csdn.net/Peealy/article/details/116895964</p>',48)],d={},l=(0,a(6262).A)(d,[["render",function(e,i){return(0,n.uX)(),(0,n.CE)("div",null,t)}]]),s=JSON.parse('{"path":"/datastruc/%E5%93%88%E5%B8%8C%E8%A1%A8.html","title":"哈希表","lang":"zh-CN","frontmatter":{"category":"数据结构","description":"哈希表 哈希表（Hash Table），也称为散列表，是一种数据结构，它可以提供非常快速的数据插入和查找操作。哈希表通过一个称为哈希函数（Hash Function）的算法，将键（Key）转换为数组索引，从而能够快速定位到数据的存储位置。 在哈希表中，每个键值对（Key-Value Pair）都被哈希函数映射到表中的一个位置，以便快速访问。但是，由于不...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/datastruc/%E5%93%88%E5%B8%8C%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"哈希表"}],["meta",{"property":"og:description","content":"哈希表 哈希表（Hash Table），也称为散列表，是一种数据结构，它可以提供非常快速的数据插入和查找操作。哈希表通过一个称为哈希函数（Hash Function）的算法，将键（Key）转换为数组索引，从而能够快速定位到数据的存储位置。 在哈希表中，每个键值对（Key-Value Pair）都被哈希函数映射到表中的一个位置，以便快速访问。但是，由于不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哈希表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"C++ STL 之 哈希表","slug":"c-stl-之-哈希表","link":"#c-stl-之-哈希表","children":[{"level":3,"title":"如何使用STL库中的哈希表","slug":"如何使用stl库中的哈希表","link":"#如何使用stl库中的哈希表","children":[]},{"level":3,"title":"STL中哈希表的常用函数","slug":"stl中哈希表的常用函数","link":"#stl中哈希表的常用函数","children":[]}]}],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":5.24,"words":1573},"filePathRelative":"datastruc/哈希表.md","localizedDate":"2024年5月9日","excerpt":"\\n<p>哈希表（Hash Table），也称为散列表，是一种数据结构，它可以提供非常快速的数据插入和查找操作。哈希表通过一个称为哈希函数（Hash Function）的算法，将键（Key）转换为数组索引，从而能够快速定位到数据的存储位置。</p>\\n<p>在哈希表中，每个键值对（Key-Value Pair）都被哈希函数映射到表中的一个位置，以便快速访问。但是，由于不同的键可能会被映射到同一个位置，这就产生了所谓的哈希冲突（Hash Collision）。为了解决冲突，有几种方法可以使用，如链地址法（Chaining）和开放地址法（Open Addressing）。</p>\\n<p>链地址法是在冲突发生的索引处使用链表来存储所有映射到该索引的元素。而开放地址法则是寻找另一个空闲的位置来存储冲突的元素。</p>","autoDesc":true}')}}]);