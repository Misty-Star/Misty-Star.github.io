"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[507],{6262:(l,i)=>{i.A=(l,i)=>{const s=l.__vccOpts||l;for(const[l,a]of i)s[l]=a;return s}},4422:(l,i,s)=>{s.r(i),s.d(i,{comp:()=>u,data:()=>k});var a=s(641);const p=s.p+"assets/img/传输层.1650b6b8.png",n=s.p+"assets/img/拥塞.7b6b34ea.png",e=[(0,a.Fv)('<figure><img src="'+p+'" alt="传输层" tabindex="0" loading="lazy"><figcaption>传输层</figcaption></figure><h1 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层"><span>传输层</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><h3 id="端到端通信" tabindex="-1"><a class="header-anchor" href="#端到端通信"><span>端到端通信</span></a></h3><h3 id="主要协议" tabindex="-1"><a class="header-anchor" href="#主要协议"><span>主要协议</span></a></h3><ul><li><p>UDP</p></li><li><p>TCP</p></li></ul><h3 id="协议端口" tabindex="-1"><a class="header-anchor" href="#协议端口"><span>协议端口</span></a></h3><ul><li><p>服务器端使用的端口</p><ul><li><p>0～45151</p><ul><li><p>熟知端口号（全球通用端口号）</p><ul><li>1～1023</li></ul></li><li><p>登记端口号</p><ul><li>1024～49151</li></ul></li></ul></li></ul></li><li><p>客户端使用的端口</p><ul><li>45152～65535</li></ul></li></ul><h3 id="pdu" tabindex="-1"><a class="header-anchor" href="#pdu"><span>PDU</span></a></h3><ul><li><p>TCP报文段</p></li><li><p>UDP用户数据报</p></li></ul><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><ul><li>为应用进程之间提供端到端的逻辑通信</li></ul><h3 id="重要功能" tabindex="-1"><a class="header-anchor" href="#重要功能"><span>重要功能</span></a></h3><ul><li>分用与复用</li></ul><h2 id="udp" tabindex="-1"><a class="header-anchor" href="#udp"><span>UDP</span></a></h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li><p>无连接、不可靠</p></li><li><p>尽最大努力交付</p></li><li><p>面向报文</p><ul><li>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层</li></ul></li><li><p>没有拥塞控制</p></li><li><p>支持一对一、一对多、多对一、多对多等交互通信</p></li><li><p>首部开销小，只有8字节</p></li></ul><h3 id="udp的首部格式" tabindex="-1"><a class="header-anchor" href="#udp的首部格式"><span>UDP的首部格式</span></a></h3><ul><li>子主题 1</li></ul><h2 id="tcp概述" tabindex="-1"><a class="header-anchor" href="#tcp概述"><span>TCP概述</span></a></h2><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h3><ul><li><p>面向连接</p><ul><li>建立逻辑连接</li></ul></li><li><p>点对点通信</p></li><li><p>可靠交付</p></li><li><p>全双工通信</p></li><li><p>有拥塞控制</p></li><li><p>基于字节流</p><ul><li><p>没有固定的报文边界</p></li><li><p>接收端读取recv时，不对数据量做任何假设</p></li><li><p>应用记录边界标识</p><ul><li><p>用特殊的结束符</p></li><li><p>给报文加上首部，记录报文长度</p></li></ul></li></ul></li></ul><h3 id="tcp的连接" tabindex="-1"><a class="header-anchor" href="#tcp的连接"><span>TCP的连接</span></a></h3><ul><li><p>连接的端点称为套接字（Socket）或插口</p></li><li><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>TCP连接::={socket1,socket2} = {(IP1:port1),(IP2:port2)}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="报文首部格式" tabindex="-1"><a class="header-anchor" href="#报文首部格式"><span>报文首部格式</span></a></h3>',25),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"固定首部"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"源端口和目的端口（2+2字节）")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"序号（4字节）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"本报文段发送数据的第一个字节的序号")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"确认号（4字节）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"期望收到对方下一个报文段的第一个数据字节的序号")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"数据偏移（即首部长度）（4位）")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"保留（6位）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"保留使用，目前置为0")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"紧急URG（URGent）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"当URG=1，表明紧急指针字段有效。")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"发送方")])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"确认ACK（ACKnowledgment）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"当ACK=1，确认号有效；当ACK=0，确认号无效")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"推送PSH(PuSH)"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"接收TCP收到PSH=1的报文段，就尽快交付接收应用进程，而不再等到整个缓存都填满后再向上交付")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"复位RST（ReSeT）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"当RST=1，表明TCP连接中出现严重差错，需释放连接，重新建立运输连接")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"同步SYN（SYNchronization）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"SYN=1，ACK=0：连接请求报文段")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"SYN=1，ACK=1：连接接受报文段")])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"终止FIN（FINish）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"用来释放一个连接")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"FIN=1表明此报文段的发送端的数据已发送完毕，并要求释放运输连接")])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"窗口（2字节）")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"校验和（2字节）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"检验范围：首部+数据")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"紧急指针（2字节）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"在URG=1时，指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据），指出紧急数据的末尾在报文段中的位置")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"选项（最长40字节）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"使TCP首部长度是4字节的整数倍")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"最大报文短长度MSS（Maximum Segment Size）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"每个TCP报文段中的数据字段的最大长度")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"与接收窗口值没有关系")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"默认值：536字节")])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"窗口扩大（3字节）"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"其中一个字节表示移位值S")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"窗口值位数从16增大到（16+S）位")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"移位值S允许使用的最大值是14")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"窗口最大值增大到"),(0,a.Lk)("p",{class:"katex-block"},[(0,a.Lk)("span",{class:"katex-display"},[(0,a.Lk)("span",{class:"katex"},[(0,a.Lk)("span",{class:"katex-mathml"},[(0,a.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[(0,a.Lk)("semantics",null,[(0,a.Lk)("mrow"),(0,a.Lk)("annotation",{encoding:"application/x-tex"})])])]),(0,a.Lk)("span",{class:"katex-html","aria-hidden":"true"})])])]),(0,a.Lk)("p",{class:"katex-block"},[(0,a.Lk)("span",{class:"katex-display"},[(0,a.Lk)("span",{class:"katex"},[(0,a.Lk)("span",{class:"katex-mathml"},[(0,a.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[(0,a.Lk)("semantics",null,[(0,a.Lk)("mrow"),(0,a.Lk)("annotation",{encoding:"application/x-tex"})])])]),(0,a.Lk)("span",{class:"katex-html","aria-hidden":"true"})])])])])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"选择确认")])])])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"*可选部分（4n字节）")])],-1),(0,a.Fv)('<h2 id="可靠传输" tabindex="-1"><a class="header-anchor" href="#可靠传输"><span>可靠传输</span></a></h2><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li><p>停止等待协议（stop and wait）</p><ul><li><p>无差错情况</p><ul><li>A发送一个分组，B收到后发送确认，A收到确认后发送下一个分组</li></ul></li><li><p>有差错情况</p><ul><li><p>A发送一个分组，B检测到出错，不发送确认，A持续等待</p></li><li><p>超时重传</p><ul><li>A发送消息完毕后，超过一定时间没有收到确认，重传前面发过的分组</li></ul></li></ul></li><li><p>确认丢失和确认迟到</p><ul><li><p>A在超时计时器到期后重传M</p></li><li><p>假定B又收到了M</p><ul><li><p>丢弃新的M分组</p></li><li><p>向A发送确认</p></li></ul></li></ul></li><li><p>要点</p><ul><li><p>停止等待</p><ul><li>每发送完一个分组就停止发送，等待对方的确认。收到确认后再发哦是哪个下一个分组</li></ul></li><li><p>编号</p><ul><li>对分组进行编号</li></ul></li><li><p>暂存</p><ul><li>发送方缓存出错的分组</li></ul></li><li><p>超时 重传</p><ul><li>超过一定等待时间后，发送方重新发送分组</li></ul></li><li><p>超时计时器的重传时间应当比数据再分组传输的平均往返时间更长一些，防止没必要的重传</p></li><li><p>简单，但信道利用率低</p></li></ul></li></ul></li><li><p>流水线传输</p><ul><li><p>在收到确认前，连续发送多个分组</p></li><li><p>目的：提高信道利用率</p></li></ul></li><li><p>连续ARQ（自动重传请求）协议</p><ul><li><p>发送窗口</p><ul><li>位于窗口内的分组都可连续发送出去，而不需要等待对方的确认</li></ul></li><li><p>滑动窗口</p><ul><li>每收到一个确认，把发送窗口向前滑动一个分组位置</li></ul></li><li><p>累积确认</p><ul><li>接收方对按序到达的最后一个分组发送确认</li></ul></li><li><p>Go-back-N</p><ul><li><p>表示需要再退回来重传已发送过的N个分组</p></li><li><p>缺点：通信质量不好时，重传大量不必要分组</p></li></ul></li></ul></li></ul><h3 id="tcp可靠传输的实现" tabindex="-1"><a class="header-anchor" href="#tcp可靠传输的实现"><span>TCP可靠传输的实现</span></a></h3>',4),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"滑动窗口"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"发送窗口")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"接收窗口")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"以字节为单位")])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"超时重传"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"加权平均往返时间RTTs"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",{class:"katex-block"},[(0,a.Lk)("span",{class:"katex-display"},[(0,a.Lk)("span",{class:"katex"},[(0,a.Lk)("span",{class:"katex-mathml"},[(0,a.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[(0,a.Lk)("semantics",null,[(0,a.Lk)("mrow",null,[(0,a.Lk)("mtext",null,"新的"),(0,a.Lk)("mi",null,"R"),(0,a.Lk)("mi",null,"T"),(0,a.Lk)("msub",null,[(0,a.Lk)("mi",null,"T"),(0,a.Lk)("mi",null,"s")]),(0,a.Lk)("mo",null,"="),(0,a.Lk)("mrow",null,[(0,a.Lk)("mo",{fence:"true"},"("),(0,a.Lk)("mn",null,"1"),(0,a.Lk)("mo",null,"−"),(0,a.Lk)("mi",null,"α"),(0,a.Lk)("mo",{fence:"true"},")")]),(0,a.Lk)("mo",null,"×"),(0,a.Lk)("mrow",null,[(0,a.Lk)("mo",{fence:"true"},"("),(0,a.Lk)("mtext",null,"旧的"),(0,a.Lk)("mi",null,"R"),(0,a.Lk)("mi",null,"T"),(0,a.Lk)("msub",null,[(0,a.Lk)("mi",null,"T"),(0,a.Lk)("mi",null,"s")]),(0,a.Lk)("mo",{fence:"true"},")")]),(0,a.Lk)("mo",null,"+"),(0,a.Lk)("mi",null,"α"),(0,a.Lk)("mo",null,"×"),(0,a.Lk)("mrow",null,[(0,a.Lk)("mo",{fence:"true"},"("),(0,a.Lk)("mtext",null,"新的RTT样本"),(0,a.Lk)("mo",{fence:"true"},")")])]),(0,a.Lk)("annotation",{encoding:"application/x-tex"}," \\text{新的}RTT_{s}=\\left( 1-\\alpha \\right) \\times \\left( \\text{旧的}RTT_{s}\\right) +\\alpha \\times \\left( \\text{新的RTT样本}\\right) ")])])]),(0,a.Lk)("span",{class:"katex-html","aria-hidden":"true"},[(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),(0,a.Lk)("span",{class:"mord text"},[(0,a.Lk)("span",{class:"mord cjk_fallback"},"新的")]),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),(0,a.Lk)("span",{class:"mord"},[(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),(0,a.Lk)("span",{class:"msupsub"},[(0,a.Lk)("span",{class:"vlist-t vlist-t2"},[(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.1514em"}},[(0,a.Lk)("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[(0,a.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,a.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,a.Lk)("span",{class:"mord mtight"},[(0,a.Lk)("span",{class:"mord mathnormal mtight"},"s")])])])]),(0,a.Lk)("span",{class:"vlist-s"},"​")]),(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.15em"}},[(0,a.Lk)("span")])])])])]),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,a.Lk)("span",{class:"mrel"},"="),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),(0,a.Lk)("span",{class:"minner"},[(0,a.Lk)("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),(0,a.Lk)("span",{class:"mord"},"1"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mbin"},"−"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),(0,a.Lk)("span",{class:"mclose delimcenter",style:{top:"0em"}},")")]),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mbin"},"×"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),(0,a.Lk)("span",{class:"minner"},[(0,a.Lk)("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),(0,a.Lk)("span",{class:"mord text"},[(0,a.Lk)("span",{class:"mord cjk_fallback"},"旧的")]),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),(0,a.Lk)("span",{class:"mord"},[(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),(0,a.Lk)("span",{class:"msupsub"},[(0,a.Lk)("span",{class:"vlist-t vlist-t2"},[(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.1514em"}},[(0,a.Lk)("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[(0,a.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,a.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,a.Lk)("span",{class:"mord mtight"},[(0,a.Lk)("span",{class:"mord mathnormal mtight"},"s")])])])]),(0,a.Lk)("span",{class:"vlist-s"},"​")]),(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.15em"}},[(0,a.Lk)("span")])])])])]),(0,a.Lk)("span",{class:"mclose delimcenter",style:{top:"0em"}},")")]),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mbin"},"+"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mbin"},"×"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),(0,a.Lk)("span",{class:"minner"},[(0,a.Lk)("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),(0,a.Lk)("span",{class:"mord text"},[(0,a.Lk)("span",{class:"mord cjk_fallback"},"新的"),(0,a.Lk)("span",{class:"mord"},"RTT"),(0,a.Lk)("span",{class:"mord cjk_fallback"},"样本")]),(0,a.Lk)("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])])])])])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"超时重传时间RTO"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"应略大于RTTs")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"RFC 6298建议"),(0,a.Lk)("p",{class:"katex-block"},[(0,a.Lk)("span",{class:"katex-display"},[(0,a.Lk)("span",{class:"katex"},[(0,a.Lk)("span",{class:"katex-mathml"},[(0,a.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[(0,a.Lk)("semantics",null,[(0,a.Lk)("mrow",null,[(0,a.Lk)("mi",null,"R"),(0,a.Lk)("mi",null,"T"),(0,a.Lk)("mi",null,"O"),(0,a.Lk)("mo",null,"="),(0,a.Lk)("mi",null,"R"),(0,a.Lk)("mi",null,"T"),(0,a.Lk)("msub",null,[(0,a.Lk)("mi",null,"T"),(0,a.Lk)("mi",null,"s")]),(0,a.Lk)("mo",null,"+"),(0,a.Lk)("mn",null,"4"),(0,a.Lk)("mo",null,"×"),(0,a.Lk)("mi",null,"R"),(0,a.Lk)("mi",null,"T"),(0,a.Lk)("msub",null,[(0,a.Lk)("mi",null,"T"),(0,a.Lk)("mi",null,"D")])]),(0,a.Lk)("annotation",{encoding:"application/x-tex"}," RTO=RTT_{s}+4\\times RTT_{D} ")])])]),(0,a.Lk)("span",{class:"katex-html","aria-hidden":"true"},[(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"0.6833em"}}),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"RTO"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,a.Lk)("span",{class:"mrel"},"="),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),(0,a.Lk)("span",{class:"mord"},[(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),(0,a.Lk)("span",{class:"msupsub"},[(0,a.Lk)("span",{class:"vlist-t vlist-t2"},[(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.1514em"}},[(0,a.Lk)("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[(0,a.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,a.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,a.Lk)("span",{class:"mord mtight"},[(0,a.Lk)("span",{class:"mord mathnormal mtight"},"s")])])])]),(0,a.Lk)("span",{class:"vlist-s"},"​")]),(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.15em"}},[(0,a.Lk)("span")])])])])]),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mbin"},"+"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a.Lk)("span",{class:"mord"},"4"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a.Lk)("span",{class:"mbin"},"×"),(0,a.Lk)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a.Lk)("span",{class:"base"},[(0,a.Lk)("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),(0,a.Lk)("span",{class:"mord"},[(0,a.Lk)("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),(0,a.Lk)("span",{class:"msupsub"},[(0,a.Lk)("span",{class:"vlist-t vlist-t2"},[(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.3283em"}},[(0,a.Lk)("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[(0,a.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,a.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,a.Lk)("span",{class:"mord mtight"},[(0,a.Lk)("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"D")])])])]),(0,a.Lk)("span",{class:"vlist-s"},"​")]),(0,a.Lk)("span",{class:"vlist-r"},[(0,a.Lk)("span",{class:"vlist",style:{height:"0.15em"}},[(0,a.Lk)("span")])])])])])])])])])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"RTTD"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"RTT的偏差的加权平均值，与RTTs和心得RTT样本之差有关")])])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"Karn算法"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"情景"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"发送报文段，超时未收到确认，重传报文段，收到确认，无法判断是对原报文段还是重传报文段的确认")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"目的"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"使得出的加权平均RTTs和RTO较准确")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"思路"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"在计算加权平均RTTs时，只要报文段重传了，就不采用其往返时间样本")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"问题"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"若报文段时间突然增大，超时重传时延RTO无法更新")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"修正的Karn算法"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"报文段每重传一次，就把RTO增大一些"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"典型做法：新RTO=2旧RTO")])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"当不再发生重传时，才正常计算RTO")])])])])])])]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"选择确认SACK"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"作用：只传送缺少的数据，而不重传已经正确到达的数据")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"用法：双方建立TCP连接时，在TCP首部选项中加上“允许SACK”的选项"),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"1字节指明是SACK选项，1字节指明这个选项要占多少字节")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"指明一个字节块用掉8字节（序号有32位，需用4字节表示）")]),(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"最多指明4个字节块（首部选项最大长度40字节）")])])])])])],-1),(0,a.Fv)('<h2 id="tcp流量控制" tabindex="-1"><a class="header-anchor" href="#tcp流量控制"><span>TCP流量控制</span></a></h2><h3 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口"><span>滑动窗口</span></a></h3><ul><li><p>原理</p><ul><li>发送方根据接收方通告的接收窗口动态调整发送数据量</li></ul></li><li><p>死锁问题</p><ul><li><p>接收方发送零窗口通知，发送方停止发送</p></li><li><p>接收方发送的非零窗口通知丢失</p></li><li><p>发送方一直等待接收方的非零窗口通知</p></li><li><p>接收方一直等待发送方发送数据</p></li><li><p>解决方法：持续计时器</p></li></ul></li><li><p>持续计时器</p><ul><li><p>只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器</p></li><li><p>持续计时器到期，就发送一个零窗口探测报文段（仅携带1字节的数据）</p></li><li><p>对方在确认这个探测报文段时给出现在的窗口值</p><ul><li>仍为0，重新设置持续计时器</li></ul></li></ul></li></ul><h3 id="传输效率" tabindex="-1"><a class="header-anchor" href="#传输效率"><span>传输效率</span></a></h3><ul><li><p>用不同机制控制TCP报文段的发送时机</p><ul><li><p>机制一</p><ul><li><p>TCP维持一个变量，等于最大报文段长度MSS</p></li><li><p>只要缓存中的数据打到MSS字节时，就组装成一个TCP报文段发送出去</p></li></ul></li><li><p>机制二</p><ul><li>由发送方的应用进程指明要求发送报文段，即TCP支持的推送（push）操作</li></ul></li><li><p>机制三</p><ul><li>发送方的一个计时器到期后，把当前缓存数据装入报文段（不能大于MSS）发送出去</li></ul></li></ul></li></ul><h3 id="糊涂窗口综合征" tabindex="-1"><a class="header-anchor" href="#糊涂窗口综合征"><span>糊涂窗口综合征</span></a></h3><ul><li><p>现象</p><ul><li>交换的报文段中的数据部分过小，消耗的资源多，传输效率小</li></ul></li><li><p>发送方</p><ul><li><p>原因</p><ul><li>接受到来自应用程序的数据时马上发送数据</li></ul></li><li><p>解决方式：Nagle算法</p><ul><li><p>若应用程序逐字节发送数据，则发送第一个数据字节，缓存后续数据字节</p></li><li><p>收到对第一个数据字节的确认后，发送缓存，同时缓存后续数据</p></li></ul></li></ul></li><li><p>接收方</p><ul><li><p>原因</p><ul><li>接收方应用进程消耗数据太慢，拥塞控制窗口过小</li></ul></li><li><p>解决方式：让接收方等待一段时间</p><ul><li><p>等到接收缓存已有足够空间容纳一个最长的报文段</p></li><li><p>或者等到接收缓存已有一半空闲的空间</p></li></ul></li></ul></li></ul><h2 id="tcp拥塞控制" tabindex="-1"><a class="header-anchor" href="#tcp拥塞控制"><span>TCP拥塞控制</span></a></h2><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><ul><li><p>拥塞的概念</p><ul><li>某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏</li></ul></li><li><p>拥塞的原因</p><ul><li><p>链路容量不足、资源分配不均衡</p></li><li><p>路由器缓存空间、流量分布不均衡</p></li><li><p>处理机速度太慢</p></li></ul></li><li><p>开环控制方法</p><ul><li>在设计网络时考虑发生拥塞的因素，力求网络不产生拥塞</li></ul></li><li><p>闭环控制方法</p><ul><li><p>基于反馈环路的概念</p></li><li><p>检测：检测网络系统以便检测到拥塞在何时、何处发生</p></li><li><p>传送：将拥塞发生的信息传送到可采取行动的地方</p></li><li><p>调整：调整网络系统的运行以解决出现的问题</p></li></ul></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><img src="'+n+'" alt="拥塞" loading="lazy"></span></a></h3><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><ul><li><p>基于窗口（属于闭环控制）</p></li><li><p>发送方维持一个拥塞窗口CWND（Congestion Window）</p></li><li><p>拥塞窗口的大小取决于网络的拥塞程度，并动态变化</p></li><li><p>发送方让自己的发送窗口等于拥塞窗口</p></li></ul><h3 id="拥塞判断依据" tabindex="-1"><a class="header-anchor" href="#拥塞判断依据"><span>拥塞判断依据</span></a></h3><ul><li><p>超时重传计时器超时</p><ul><li>网络已经出现了拥塞</li></ul></li><li><p>收到3个重复的确认（ACK）</p><ul><li>预示网络可能会出现拥塞</li></ul></li></ul><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h3><ul><li><p>慢开始</p><ul><li><p>目的</p><ul><li>探测网络的负载能力或拥塞程度</li></ul></li><li><p>思路</p><ul><li>由小到大逐渐增大注入到网络中的数据字节，即：由小到大逐渐增大拥塞窗口数值</li></ul></li><li><p>算法</p><ul><li>每收到一个对新的报文段的确认后，把拥塞窗口增加最多一个SMSS的数值</li></ul></li><li><p>轮次与门限值</p><ul><li><p>慢开始门限ssthresh</p><ul><li><p>cwnd &lt; ssthresh</p><ul><li>使用慢开始算法</li></ul></li><li><p>cwnd &gt; ssthresh</p><ul><li>停止使用慢开始算法，改用拥塞避免算法</li></ul></li><li><p>cwnd = ssthresh</p><ul><li>既可以使用慢开始算法，也可以使用拥塞避免算法</li></ul></li></ul></li><li><p>传输轮次</p><ul><li>把拥塞穿孔cwnd所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认</li></ul></li><li><p>发送方判断网络出现拥塞时（超时重传计时器超时）</p><ul><li><p>慢开始门限ssthresh = max (cwnd/2 , 2)</p></li><li><p>拥塞窗口cwnd = 1</p></li><li><p>执行慢开始算法</p></li></ul></li></ul></li></ul></li><li><p>拥塞避免</p><ul><li><p>目的</p><ul><li>让拥塞窗口cwnd缓慢地增大，避免出现拥塞</li></ul></li><li><p>思路</p><ul><li><p>每经过一个传输轮次，拥塞窗口cwnd = cwnd +1</p></li><li><p>让拥塞窗口按线性规律缓慢增长</p></li></ul></li></ul></li><li><p>快重传与快恢复FR</p><ul><li><p>快重传</p><ul><li><p>目的</p><ul><li>让发送方尽早知道发生了个别报文段的丢失</li></ul></li><li><p>算法</p><ul><li><p>发送方 只要连续收到三个重复的确认，就立即进行重传（不用等到超时计时器超时）</p></li><li><p>要求接收方立即发送确认，即便是收到了失序的报文段</p></li></ul></li></ul></li><li><p>快恢复</p><ul><li><p>发送端收到连续三个重复的确认时，不执行慢开始算法，而是执行快恢复FR算法</p></li><li><p>算法</p><ul><li><p>慢开始门限ssthresh = 当前拥塞窗口cwnd/2</p></li><li><p>新拥塞窗口cwnd = 慢开始门限ssthresh</p></li><li><p>开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大</p></li></ul></li></ul></li></ul></li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><ul><li>发送方窗口的上限值 = Min(接收窗口rwnd,拥塞窗口cwnd)</li></ul><h3 id="主动队列管理aqm-active-queue-management" tabindex="-1"><a class="header-anchor" href="#主动队列管理aqm-active-queue-management"><span>＊主动队列管理AQM（Active Queue Management）</span></a></h3><ul><li><p>路由器分组丢弃策略</p><ul><li><p>先进先出策略</p><ul><li>先到的分组先处理</li></ul></li><li><p>尾部丢弃策略</p><ul><li>处理队列满后，丢弃后续分组</li></ul></li><li><p>严重问题：全局同步</p><ul><li>子主题 1</li></ul></li></ul></li><li><p>主动</p><ul><li><p>不要等到路由器的队列长度已经达到最大值时才不得不丢弃后面到达的分组</p></li><li><p>在队列长度达到某个值得警惕的数值时（有拥塞征兆），就主动丢弃到达的分组</p></li></ul></li><li><p>实现方法</p><ul><li><p>随机早期检测RED</p><ul><li>经过多年实践证明，RED算法效果不太理想</li></ul></li></ul></li></ul><h2 id="tcp连接管理" tabindex="-1"><a class="header-anchor" href="#tcp连接管理"><span>TCP连接管理</span></a></h2><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h3><ul><li><p>握手</p><ul><li>TCP建立连接的过程</li></ul></li><li><p>二报文握手建立连接的问题</p><ul><li><p>客户第一次握手报文迟到，服务器发送确认报文，建立连接</p></li><li><p>服务器等待客户发送数据，而客户并没有数据要发送</p></li></ul></li><li><p>为什么要三次握手</p><ul><li>客户和服务器之间交换三个TCP报文段，以防止已失效的连接请求报文段突然又传送到了，因而产生TCP连接建立错误</li></ul></li><li><p>流程</p><ul><li><p>第一次握手</p><ul><li><p>A发送连接请求报文</p><ul><li><p>SYN = 1</p></li><li><p>seq = x</p></li></ul></li><li><p>不携带数据，但消耗一个序号</p></li></ul></li><li><p>第二次握手</p><ul><li><p>B收到请求报文段，如同意，发送确认</p><ul><li><p>SYN = 1</p></li><li><p>ACK = 1</p></li><li><p>ack = x + 1</p></li><li><p>seq = y</p></li></ul></li><li><p>不携带数据，但消耗一个序号</p></li></ul></li><li><p>第三次握手</p><ul><li><p>A收到同意报文，向B给出确认</p><ul><li><p>ACK = 1</p></li><li><p>ack = y + 1</p></li><li><p>seq = x + 1</p></li></ul></li><li><p>A的TCP通知上层应用进程，连接已经建立</p></li></ul></li></ul></li></ul><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h3><ul><li><p>流程</p><ul><li><p>第一次挥手</p><ul><li><p>A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，等待B的确认</p><ul><li><p>FIN = 1</p></li><li><p>seq = u</p></li></ul></li><li><p>TCP规定：FIN报文即使不携带数据，也消耗掉一个序号</p></li></ul></li><li><p>第二次挥手</p><ul><li><p>B发出确认</p><ul><li><p>ACK = 1</p></li><li><p>ack = u +1</p></li><li><p>seq = v</p></li></ul></li><li><p>TCP服务器通知高层应用进程</p></li><li><p>TCP连接处于半关闭（half-close）状态</p><ul><li><p>从A到B这个方向的连接释放掉了</p></li><li><p>B若发送数据，A仍要接受</p></li></ul></li></ul></li><li><p>第三次挥手</p><ul><li><p>若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接</p><ul><li><p>FIN = 1</p></li><li><p>ACK = 1</p></li><li><p>ack = u +1</p></li><li><p>seq = w</p></li></ul></li></ul></li><li><p>第四次挥手</p><ul><li><p>A收到连接释放报文段后，必须发出确认</p><ul><li><p>ACK = 1</p></li><li><p>ack = w + 1</p></li><li><p>seq = u + 1</p></li></ul></li><li><p>B收到确认后，释放TCP连接</p></li></ul></li><li><p>A等待2MSL的时间，后才释放TCP连接</p><ul><li><p>保证发送的最后一个ACK报文段能够到达B</p></li><li><p>防止“已失效的连接请求报文段”出现在本连接中</p></li></ul></li></ul></li><li><p>保活计时器</p><ul><li><p>作用</p><ul><li>防止TCP连接出现长时期的空闲</li></ul></li><li><p>流程</p><ul><li><p>通常设置为2小时</p></li><li><p>若服务器超过2小时还没收到客户的信息，就发送探测报文段</p></li><li><p>若发送了10个探测报文段还没有响应，就假定客户出了故障，因而就终止该连接</p></li></ul></li></ul></li><li><p>小结：TCP四个计时器</p><ul><li><p>超时重传计时器</p></li><li><p>坚持计时器（0窗口报文探测计时器）</p></li><li><p>时间等待计时器（2MSL关闭连接）</p></li><li><p>保活计时器</p></li></ul></li></ul><h3 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机"><span>状态机</span></a></h3>',27)],t={},u=(0,s(6262).A)(t,[["render",function(l,i){return(0,a.uX)(),(0,a.CE)("div",null,e)}]]),k=JSON.parse('{"path":"/cyber/Network/%E4%BC%A0%E8%BE%93%E5%B1%82.html","title":"传输层","lang":"zh-CN","frontmatter":{"category":"计算机网络","order":5,"description":"传输层传输层 传输层 概述 端到端通信 主要协议 UDP TCP 协议端口 服务器端使用的端口 0～45151 熟知端口号（全球通用端口号） 1～1023 登记端口号 1024～49151 客户端使用的端口 45152～65535 PDU TCP报文段 UDP用户数据报 作用 为应用进程之间提供端到端的逻辑通信 重要功能 分用与复用 UDP 特点 无连...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/cyber/Network/%E4%BC%A0%E8%BE%93%E5%B1%82.html"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"传输层"}],["meta",{"property":"og:description","content":"传输层传输层 传输层 概述 端到端通信 主要协议 UDP TCP 协议端口 服务器端使用的端口 0～45151 熟知端口号（全球通用端口号） 1～1023 登记端口号 1024～49151 客户端使用的端口 45152～65535 PDU TCP报文段 UDP用户数据报 作用 为应用进程之间提供端到端的逻辑通信 重要功能 分用与复用 UDP 特点 无连..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-11T16:25:39.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-06-11T16:25:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"传输层\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-11T16:25:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"端到端通信","slug":"端到端通信","link":"#端到端通信","children":[]},{"level":3,"title":"主要协议","slug":"主要协议","link":"#主要协议","children":[]},{"level":3,"title":"协议端口","slug":"协议端口","link":"#协议端口","children":[]},{"level":3,"title":"PDU","slug":"pdu","link":"#pdu","children":[]},{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"重要功能","slug":"重要功能","link":"#重要功能","children":[]}]},{"level":2,"title":"UDP","slug":"udp","link":"#udp","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"UDP的首部格式","slug":"udp的首部格式","link":"#udp的首部格式","children":[]}]},{"level":2,"title":"TCP概述","slug":"tcp概述","link":"#tcp概述","children":[{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"TCP的连接","slug":"tcp的连接","link":"#tcp的连接","children":[]},{"level":3,"title":"报文首部格式","slug":"报文首部格式","link":"#报文首部格式","children":[]}]},{"level":2,"title":"可靠传输","slug":"可靠传输","link":"#可靠传输","children":[{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"TCP可靠传输的实现","slug":"tcp可靠传输的实现","link":"#tcp可靠传输的实现","children":[]}]},{"level":2,"title":"TCP流量控制","slug":"tcp流量控制","link":"#tcp流量控制","children":[{"level":3,"title":"滑动窗口","slug":"滑动窗口","link":"#滑动窗口","children":[]},{"level":3,"title":"传输效率","slug":"传输效率","link":"#传输效率","children":[]},{"level":3,"title":"糊涂窗口综合征","slug":"糊涂窗口综合征","link":"#糊涂窗口综合征","children":[]}]},{"level":2,"title":"TCP拥塞控制","slug":"tcp拥塞控制","link":"#tcp拥塞控制","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":3,"title":"拥塞判断依据","slug":"拥塞判断依据","link":"#拥塞判断依据","children":[]},{"level":3,"title":"算法","slug":"算法","link":"#算法","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":3,"title":"＊主动队列管理AQM（Active Queue Management）","slug":"主动队列管理aqm-active-queue-management","link":"#主动队列管理aqm-active-queue-management","children":[]}]},{"level":2,"title":"TCP连接管理","slug":"tcp连接管理","link":"#tcp连接管理","children":[{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":3,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]},{"level":3,"title":"状态机","slug":"状态机","link":"#状态机","children":[]}]}],"git":{"createdTime":1718113956000,"updatedTime":1718123139000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":3}]},"readingTime":{"minutes":12.78,"words":3833},"filePathRelative":"cyber/Network/传输层.md","localizedDate":"2024年6月11日","excerpt":"<figure><figcaption>传输层</figcaption></figure>\\n<h1>传输层</h1>\\n<h2>概述</h2>\\n<h3>端到端通信</h3>\\n<h3>主要协议</h3>\\n<ul>\\n<li>\\n<p>UDP</p>\\n</li>\\n<li>\\n<p>TCP</p>\\n</li>\\n</ul>\\n<h3>协议端口</h3>\\n<ul>\\n<li>\\n<p>服务器端使用的端口</p>\\n<ul>\\n<li>\\n<p>0～45151</p>\\n<ul>\\n<li>\\n<p>熟知端口号（全球通用端口号）</p>\\n<ul>\\n<li>1～1023</li>\\n</ul>\\n</li>\\n<li>\\n<p>登记端口号</p>\\n<ul>\\n<li>1024～49151</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>客户端使用的端口</p>\\n<ul>\\n<li>45152～65535</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);