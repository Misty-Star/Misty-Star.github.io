"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[590],{6262:(i,l)=>{l.A=(i,l)=>{const e=i.__vccOpts||i;for(const[i,n]of l)e[i]=n;return e}},647:(i,l,e)=>{e.r(l),e.d(l,{comp:()=>d,data:()=>a});var n=e(641);const t=[(0,n.Fv)('<h1 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h1><h2 id="c-stl-之-list" tabindex="-1"><a class="header-anchor" href="#c-stl-之-list"><span>C++ STL 之 List</span></a></h2><h3 id="一、list-的介绍" tabindex="-1"><a class="header-anchor" href="#一、list-的介绍"><span>一、list 的介绍</span></a></h3><p>list 是 STL 中的一个序列容器，实现的是双向链表，每个元素都有两个指针，分别指向元素的前驱和后继。</p><p>list 不需要指定内存大小，因为他存储在不连续的内存空间中，并由指针将他们连接在一起。</p><p>由于链表的特点，不能进行内部的随机访问，无法通过位置来访问元素，即不支持[ ] 操作符和vector.at() 操作，必须逐个遍历，可以通过开始元素或者最后一个元素遍历，它的查找要在O(n)的时间才能完成。但它允许序列快速在任意位置进行插入和删除操作作，包括在两边的pop()和push()操作。</p><h3 id="二、list-的基本操作" tabindex="-1"><a class="header-anchor" href="#二、list-的基本操作"><span>二、list 的基本操作</span></a></h3><p>使用STL标准库的 list 时，应包含头文件：#include &lt;list&gt;</p><p>1、定义</p><pre><code>list&lt;int&gt; l\t\t\t声明一个空链表\nlist&lt;int&gt; l{1,2,3}\t声明一个含指定元素的链表\nlist&lt;int&gt; l(n)    \t声明一个含n个元素的链表并全部初始化为0\nlist&lt;int&gt; l(n, m)  \t声明一个含n个元素的链表并全部初始化为m\nlist&lt;int&gt; l(a,b)  \t声明一个链表并初始化为区间[a,b]中的元素，a、b是迭代器\n</code></pre><p>2、基本操作</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>增：\n\tl.insert() \t\t\t\t\t插入一个元素到list中\n\tl.push_back() \t\t\t\t在list的末尾添加一个元素 \n\tl.push_front() \t\t\t\t在list的头部添加一个元素\n\t\n删：\n\tl.clear() \t\t\t\t\t清空list的所有元素\n\tl.erase() \t\t\t\t\t删除一个元素\n\tl.erase(l.begin(),l.end())  将l从begin()到end()之间的元素删除。\n\tl.pop_back() \t\t\t\t删除最后一个元素 \n\tl.pop_front() \t\t\t\t删除第一个元素\n\tl.remove() \t\t\t\t\t从list删除指定元素 \n\tl.remove_if() \t\t\t\t按指定条件删除元素\n\tl.unique() \t\t\t\t\t删除list中重复的元素\n\t\n改：\n\tl.resize() \t\t\t\t\t改变list的大小\n\tl.reverse() \t\t\t\t把list的元素倒转\n\t\n查：\n\tl.front() \t\t\t\t\t返回第一个元素 \n\tl.back() \t\t\t\t\t返回最后一个元素\n\tl.empty() \t\t\t\t\t若list是空的则返回true，否则返回false\n\tl.max_size() \t\t\t\t返回list能容纳的最大元素数量 \n\tl.size() \t\t\t\t\t返回list中的元素个数\n\n其他操作：\n\tl.assign() \t\t\t\t\t给list赋值\n\tl.get_allocator() \t\t\t返回list的配置器\n\tl.merge() \t\t\t\t\t合并两个list\n\tl.begin() \t\t\t\t\t返回指向第一个元素的迭代器 \n\tl.end() \t\t\t\t\t返回末尾的迭代器\n\tl.rbegin() \t\t\t\t\t返回指向第一个元素的逆向迭代器 \n\tl.rend() \t\t\t\t\t指向list末尾的逆向迭代器\n\tl.sort() \t\t\t\t\t给list排序\n\tl.splice() \t\t\t\t\t合并两个list\n\tl.swap() \t\t\t\t\t交换两个list\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、list-的用法" tabindex="-1"><a class="header-anchor" href="#三、list-的用法"><span>三、list 的用法</span></a></h3><h4 id="_1、基本用法" tabindex="-1"><a class="header-anchor" href="#_1、基本用法"><span>1、基本用法</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\nusing namespace std;\nint main(){\n\tlist&lt;int&gt; l;\n\tcout&lt;&lt;&quot;list的大小:&quot;&lt;&lt;l.size()&lt;&lt;endl;\n\t//list的大小:0\n\t\n\nfor (int i=0; i&lt;10; i++)\n\tl.push_back(i); //尾部插入元素 尾插法\ncout&lt;&lt;&quot;list的大小:&quot;&lt;&lt;l.size()&lt;&lt;endl;\n//list的大小:10\n\nlist&lt;int&gt;::iterator it = l.begin();\nwhile(it!=l.end()){\n\tcout&lt;&lt;*it&lt;&lt;&quot; &quot;;\n\tit++;\n}\ncout &lt;&lt; endl;\n//0 1 2 3 4 5 6 7 8 9\n\n//list不能随机访问容器中的值，即不能it+5这样的操作。只能一个一个的走，即it++\nit=l.begin();\nit++;\nit++;\nit++;\nl.insert(it, 100); //100插入在链表第4个位置\nfor (list&lt;int&gt;::iterator it = l.begin(); it != l.end(); it++)\n\tcout&lt;&lt;*it&lt;&lt;&quot; &quot;;\ncout&lt;&lt;endl;\n//0 1 2 100 3 4 5 6 7 8 9\n\nl.clear(); \n\ncout&lt;&lt;&quot;list的大小:&quot;&lt;&lt;l.size()&lt;&lt;endl;\n//list的大小:0\n\nfor (int i=0; i&lt;10; i++)\n\tl.push_front(i); \t\t//尾部插入元素 尾插法\ncout&lt;&lt;&quot;list的大小:&quot;&lt;&lt;l.size()&lt;&lt;endl;\n//list的大小:10\n\nfor(list&lt;int&gt;::iterator it=l.begin(); it!=l.end(); it++)\n\tcout&lt;&lt;*it&lt;&lt;&quot; &quot;;\ncout&lt;&lt;endl;        \n//9 8 7 6 5 4 3 2 1 0\n\nlist&lt;int&gt;::iterator it1 = l.begin();\nlist&lt;int&gt;::iterator it2 = l.begin();\nit2++;\nit2++;\nit2++;\n//要想删除一个区间段。只能用指针++一步一步的指向那个末尾位置，不能直接l.begin()+3\nl.erase(it1, it2);\t\t//删掉的是区间[it1,it2) \nfor (list&lt;int&gt;::iterator it=l.begin(); it!=l.end(); it++)\n\tcout&lt;&lt;*it&lt;&lt;&quot; &quot;;\ncout&lt;&lt;endl;\n//6 5 4 3 2 1 0\n\nl.insert(l.begin(), 100);\nl.insert(l.begin(), 100);\nl.insert(l.begin(), 100);\nl.erase(l.begin()); \t\t//删除该位置的元素\nfor (list&lt;int&gt;::iterator it=l.begin(); it!=l.end(); it++)\n\tcout&lt;&lt;*it&lt;&lt;&quot; &quot;;\ncout&lt;&lt;endl;\n//100 100 6 5 4 3 2 1 0\n\ncout&lt;&lt;&quot;链表中的第一个元素：&quot;&lt;&lt;l.front()&lt;&lt;endl; \n//链表中的第一个元素：100\n\ncout&lt;&lt;&quot;链表中的最后一个元素：&quot;&lt;&lt;l.back()&lt;&lt;endl; \n//链表中的最后一个元素：0\n\nl.remove(100);\t\t\t\t//移除所有100元素的值  remove\nfor (list&lt;int&gt;::iterator it=l.begin(); it!=l.end(); it++)\n\tcout&lt;&lt;*it&lt;&lt;&quot; &quot;;\ncout&lt;&lt;endl;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、resize-函数-改变list的大小" tabindex="-1"><a class="header-anchor" href="#_2、resize-函数-改变list的大小"><span>2、resize()函数： 改变list的大小</span></a></h4><p>调用 l.resize(n) 将 list 的长度改为只容纳 n 个元素，超出的元素将被删除。 如果 n 比 list 原来的长度长，那么默认超出的部分元素置为0。 也可以用resize(n, m)的方式将超出的部分赋值为m。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>list&lt;int&gt; l{1, 2, 3, 4};\nl.resize(2);\n//list中输出元素：1,2\n\nlist&lt;int&gt; l{1, 2, 3, 4};\nl.resize(6);\n//list中输出元素：1,2,3,4,0,0\n\nlist&lt;int&gt; l{1, 2, 3, 4};\nl.resize(6,9);\n//list中输出元素：1,2,3,4,9,9\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、assign-函数-给list赋值" tabindex="-1"><a class="header-anchor" href="#_3、assign-函数-给list赋值"><span>3、assign()函数： 给list赋值</span></a></h4><p>l.assign(n, val)：将 list 中的所有元素替换成n个val元素</p><p>l2.assign(l1.begin(), l1.end())：给链表 l2 赋链表 l1 的值</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>list&lt;int&gt; l{1,2,3,4,5};\nl.assign(5,10);\n//l中的元素变为10, 10, 10, 10, 10\n\nlist&lt;int&gt; l1{6,7,8,9};\nlist&lt;int&gt; l2{1,2,3,4,5};\nl2.assign(l1.begin(),l1.end());\n//l2中的元素变为6,7,8,9\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、swap-函数-交换两个list" tabindex="-1"><a class="header-anchor" href="#_4、swap-函数-交换两个list"><span>4、swap()函数： 交换两个list</span></a></h4><p>l1.swap(l2) 和 swap(l1, l2)，都可以完成 l1 链表和 l2 链表的交换。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>list&lt;int&gt; l1{6,7,8,9};\nlist&lt;int&gt; l2{1,2,3,4,5};\nswap(l1, l2); \n//或l1.swap(l2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、reverse-函数-实现list的逆置" tabindex="-1"><a class="header-anchor" href="#_5、reverse-函数-实现list的逆置"><span>5、reverse()函数： 实现list的逆置</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>list&lt;int&gt; l{1,2,3,4,5};\nreverse(l.begin(),l.end());\n//l中元素变为5，4，3，2，1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、merge-函数-合并两个list" tabindex="-1"><a class="header-anchor" href="#_6、merge-函数-合并两个list"><span>6、merge()函数： 合并两个list</span></a></h4><p>l1.merge(l2) 调用结束后 l2 变为空，l1 中元素包含原来 l1 和 l2 的元素。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>list&lt;int&gt; l1{6,7,8,9};\nlist&lt;int&gt; l2{2, 1, 3, 6, 5};\nl1.merge(l2,greater&lt;int&gt;());\n//l1中元素变为：6,7,8,9,2,1,3,6,5\n\nlist&lt;int&gt; l1{6,7,8,9};\nlist&lt;int&gt; l2{2, 1, 3, 6, 5};\nl1.merge(l2);\n//l1中元素变为：2,1,3,6,5,6,7,8,9\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、insert-函数-在指定位置插入一个或多个元素" tabindex="-1"><a class="header-anchor" href="#_7、insert-函数-在指定位置插入一个或多个元素"><span>7、insert()函数： 在指定位置插入一个或多个元素</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>l.insert(l.begin(),100);  \t\t//在l的开始位置（即头部）插入100\nl.insert(l.begin(),2, 100);  \t//在l的开始位置插入2个100\nl1.insert(l1.begin(), l2.begin(), l2.end());\n//在l1的开始位置插入l2从开始到结束的所有位置的元素\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8、remove-if-函数-按指定条件删除元素实现list的逆置" tabindex="-1"><a class="header-anchor" href="#_8、remove-if-函数-按指定条件删除元素实现list的逆置"><span>8、remove_if()函数： 按指定条件删除元素实现list的逆置</span></a></h4><p>用法1：回调函数 回调函数的原型为bool isRemove(T&amp; obj1)。 函数名任意，如果obj1需要被移除则返回1，否则返回0。 使用方法：list.remove_if(isRemove)。 这种方法最简单，但是无法向回调函数中传递参数，每一个条件就要有一个回调函数，因此不推荐使用。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>bool is_odd(constint&amp; value){\n    return (value==4);\n}\nint main(){\n    list&lt;int&gt; l{6,7,4,9,7,10};\n    l.remove_if(is_odd);\n    list&lt;int&gt;::iterator it = l.begin();\n    while(it != l.end()){\n        cout&lt;&lt;*it&lt;&lt; &quot; &quot;;\n        it++;\n    }\n    return 0;\n}\n//输出：6 7 9 7 10\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法2：创建用于比较的类，传入类名及初始化参数 用于比较的类必须重载bool operator()(T&amp; obj1)方法，如果obj1需要被移除则返回1，否则返回0。 用于比较的类还应当包含必要的构造函数，用于传递参数。 使用方法：list.remove_if(classname(args))</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>class single_digit{\npublic:\n    bool operator()(const int&amp; value){\n        return (value&lt;10);\n    }\n}; \nint main(){\n    list&lt;int&gt; l{6,7,4,9,7,10};\n    l.remove_if(single_digit());\n    list&lt;int&gt;::iterator it = l.begin();\n    while(it != l.end()){\n        cout&lt;&lt;*it&lt;&lt;&quot; &quot;;\n        it++;\n    } \n    return 0;\n}\n//输出：10\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>————————————————</p><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n</code></pre><p>原文链接：https://blog.csdn.net/weixin_44668898/article/details/102154927</p>',40)],s={},d=(0,e(6262).A)(s,[["render",function(i,l){return(0,n.uX)(),(0,n.CE)("div",null,t)}]]),a=JSON.parse('{"path":"/datastruc/%E9%93%BE%E8%A1%A8.html","title":"链表","lang":"zh-CN","frontmatter":{"category":"数据结构","description":"链表 C++ STL 之 List 一、list 的介绍 list 是 STL 中的一个序列容器，实现的是双向链表，每个元素都有两个指针，分别指向元素的前驱和后继。 list 不需要指定内存大小，因为他存储在不连续的内存空间中，并由指针将他们连接在一起。 由于链表的特点，不能进行内部的随机访问，无法通过位置来访问元素，即不支持[ ] 操作符和vecto...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/datastruc/%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"链表"}],["meta",{"property":"og:description","content":"链表 C++ STL 之 List 一、list 的介绍 list 是 STL 中的一个序列容器，实现的是双向链表，每个元素都有两个指针，分别指向元素的前驱和后继。 list 不需要指定内存大小，因为他存储在不连续的内存空间中，并由指针将他们连接在一起。 由于链表的特点，不能进行内部的随机访问，无法通过位置来访问元素，即不支持[ ] 操作符和vecto..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"链表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"C++ STL 之 List","slug":"c-stl-之-list","link":"#c-stl-之-list","children":[{"level":3,"title":"一、list 的介绍","slug":"一、list-的介绍","link":"#一、list-的介绍","children":[]},{"level":3,"title":"二、list 的基本操作","slug":"二、list-的基本操作","link":"#二、list-的基本操作","children":[]},{"level":3,"title":"三、list 的用法","slug":"三、list-的用法","link":"#三、list-的用法","children":[]}]}],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":6.25,"words":1876},"filePathRelative":"datastruc/链表.md","localizedDate":"2024年5月9日","excerpt":"\\n<h2>C++ STL 之 List</h2>\\n<h3>一、list 的介绍</h3>\\n<p>list 是 STL 中的一个序列容器，实现的是双向链表，每个元素都有两个指针，分别指向元素的前驱和后继。</p>\\n<p>list 不需要指定内存大小，因为他存储在不连续的内存空间中，并由指针将他们连接在一起。</p>\\n<p>由于链表的特点，不能进行内部的随机访问，无法通过位置来访问元素，即不支持[ ] 操作符和vector.at() 操作，必须逐个遍历，可以通过开始元素或者最后一个元素遍历，它的查找要在O(n)的时间才能完成。但它允许序列快速在任意位置进行插入和删除操作作，包括在两边的pop()和push()操作。</p>","autoDesc":true}')}}]);