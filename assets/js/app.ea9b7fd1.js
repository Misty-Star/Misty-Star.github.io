"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[524],{1709:(n,t,e)=>{e.d(t,{l:()=>l});const l={category:{"/":{path:"/category/",map:{Docker:{path:"/category/docker/",indexes:[0]},日语:{path:"/category/%E6%97%A5%E8%AF%AD/",indexes:[1,2,3,4,5]},算法:{path:"/category/%E7%AE%97%E6%B3%95/",indexes:[6,7,8]},数据结构:{path:"/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",indexes:[9,10,11,12]},计算机网络:{path:"/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",indexes:[13,14,15,16]}}}},tag:{"/":{path:"/tag/",map:{}}}}},4776:(n,t,e)=>{e.d(t,{M:()=>l});const l=["/docker%E5%AE%B9%E5%99%A8%E9%97%AE%E9%A2%98.html","/Japanese/%E5%8A%A8%E8%AF%8D.html","/Japanese/%E5%90%8D%E8%AF%8D.html","/Japanese/%E5%BD%A2%E5%AE%B9%E8%AF%8D.html","/Japanese/%E8%A1%A8%E8%BE%BE.html","/Japanese/%E8%AF%AD%E6%B3%95.html","/algorithm/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.html","/algorithm/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.html","/algorithm/","/datastruc/%E5%93%88%E5%B8%8C%E8%A1%A8.html","/datastruc/%E6%A0%88.html","/datastruc/%E9%93%BE%E8%A1%A8.html","/datastruc/%E9%98%9F%E5%88%97.html","/cyber/Network/%E6%A6%82%E8%BF%B0.html","/cyber/Network/%E7%89%A9%E7%90%86%E5%B1%82.html","/cyber/Network/%E7%BD%91%E7%BB%9C%E5%B1%82.html","/cyber/Network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.html","/intro.html","/datastruc/%E6%A0%91.html","/cyber/CTF%E2%80%94%E2%80%94HTTP%E5%8F%91%E9%80%81%E5%A4%B4Headers%E6%95%B4%E7%90%86.html","/cyber/Http%E4%BC%AA%E9%80%A0IP%E5%A4%B4%E5%A4%A7%E5%85%A8.html"]},3781:(n,t,e)=>{e.d(t,{U:()=>l});const l={article:{"/":{path:"/article/",indexes:[17,0,18,19,20,6,7,13,14,15,16,1,2,3,4,5,8,9,10,11,12]}},star:{"/":{path:"/star/",indexes:[8,17]}},timeline:{"/":{path:"/timeline/",indexes:[0,18,19,20,6,7,13,14,15,16,1,2,3,4,5,8,9,10,11,12,17]}}}},6757:(n,t,e)=>{e.d(t,{B:()=>M});var l=e(8278),a=e(5084),i=e(3073),r=e(9403),s=e(596),d=e(8831);const p=(0,l.re)({enhance:({app:n})=>{(0,a.L4)("FontIcon")||n.component("FontIcon",r.A),(0,a.L4)("Badge")||n.component("Badge",s.A),(0,a.L4)("VPCard")||n.component("VPCard",d.A)},setup:()=>{(0,i.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,i.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,i.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]});var o=e(6358),c=e(9588),h=e(355),u=e(560),g=e(1599),m=e(5496),E=e(593),y=e(3825),x=e(7152),A=e(5214),b=e(1219),B=e(3027),f=e(2763),w=e(9589);const k=(0,l.re)({enhance:({app:n})=>{n.component("CodeTabs",x.A),(0,a.L4)("CodeGroup",n)||n.component("CodeGroup",A.lF),(0,a.L4)("CodeGroupItem",n)||n.component("CodeGroupItem",A.E7),n.component("CodeDemo",b.A),n.component("MdDemo",B.A),n.component("Tabs",w.A)},setup:()=>{(0,f.p)()}});var v=e(3004),C=e(783),F=e(8465),I=e(641),D=e(8030),T=e(9920);(0,F.M_)((n=>{const t=n.t,e=!1!==n.I,l=n.i;return e?{title:t,content:l?()=>[(0,I.h)(C.GB,{icon:l}),t]:null,order:n.O,index:n.I}:null}));const S=(0,l.re)({enhance:({app:n,router:t})=>{const{scrollBehavior:e}=t.options;t.options.scrollBehavior=async(...n)=>(await C.lE.wait(),e(...n)),(0,C.fk)(n),n.component("HopeIcon",C.GB),n.component("BloggerInfo",D.tI),n.component("GlobalEncrypt",T.J),n.component("LocalEncrypt",T.n)},setup:()=>{(0,C.PV)(),(0,C.i$)(),(0,D.su)()},layouts:{Layout:C.PE,NotFound:C.Mk,BlogCategory:D.Pn,BlogHome:D.qX,BlogType:D.z7,PortfolioHome:D.G,Timeline:D.Kf}}),M=[{},p,o.A,c.A,h.A,u.A,g.A,m.A,E.A,y.A,k,v.A,S]},8164:(n,t,e)=>{e.d(t,{J:()=>a,c:()=>l});const l=JSON.parse('{"/algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html":"/algorithm/"}'),a=Object.fromEntries([["/",{loader:()=>e.e(470).then(e.bind(e,4298)),meta:{t:"Mistyの小屋",i:"home"}}],["/docker%E5%AE%B9%E5%99%A8%E9%97%AE%E9%A2%98.html",{loader:()=>e.e(331).then(e.bind(e,3187)),meta:{d:1717125442e3,c:"Docker",e:'\n<h2>前置条件</h2>\n<ul>\n<li>Nvidia显卡</li>\n<li>安装nvidia-container-runtime</li>\n</ul>\n<h3>安装nvidia-container-runtime</h3>\n<ol>\n<li>\n<p>添加Nvidia官方apt软件源（必须）</p>\n<p>创建脚本文件nvidia-container-runtime-script.sh</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">touch</span> nvidia-container-runtime-script.sh\n</code></pre></div><p>脚本内添加以下内容</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># nvidia-container-runtime-script.sh</span>\n\n<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/nvidia-container-runtime/gpgkey <span class="token operator">|</span> <span class="token punctuation">\\</span>\n  <span class="token function">sudo</span> apt-key <span class="token function">add</span> -\n<span class="token assign-left variable">distribution</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> $ID$VERSION_ID<span class="token variable">)</span></span>\n<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/nvidia-container-runtime/<span class="token variable">$distribution</span>/nvidia-container-runtime.list <span class="token operator">|</span> <span class="token punctuation">\\</span>\n  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nvidia-container-runtime.list\n<span class="token function">sudo</span> <span class="token function">apt-get</span> update\n</code></pre></div><p>运行脚本</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">sh</span> nvidia-container-runtime-script.sh\n</code></pre></div></li>\n<li>\n<p>apt安装</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nvidia-container-runtime\n</code></pre></div><p>安装完成后验证一下，输入：</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">which</span> nvidia-container-runtime\n</code></pre></div><p>应当得到输出：</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/bin/nvidia-container-runtime\n</code></pre></div></li>\n</ol>',r:{minutes:1.17,words:351},t:"Docker杂项",y:"a"}}],["/intro.html",{loader:()=>e.e(912).then(e.bind(e,4890)),meta:{d:1715177675e3,u:!0,v:"/mangaAsuka.jpg",e:"\n<p>Hi,there.My name is MistyStar,you can also call me Misty.\nXD\n一只喜爱二次元文化的苦逼大学牲</p>\n<p>MBTI: INFP-T\n人比较内向，一般不会主动找你聊天，但欢迎找我聊天，也很乐意与你成为朋友。</p>\n",r:{minutes:.25,words:75},t:"个人介绍",i:"circle-info",y:"a"}}],["/Japanese/%E5%8A%A8%E8%AF%8D.html",{loader:()=>e.e(967).then(e.bind(e,3905)),meta:{d:1715266949e3,c:"日语",e:"\n<p>ます ました</p>\n<p>ません ませんでした</p>\n<p>去：行きます</p>\n<p>来：来ます</p>\n<p>回去，回来：帰（かえ）ります</p>\n<p>买：買（か）い</p>\n<p>做：し</p>\n<p>吃：食（た）べ</p>\n<p>学习：勉強（べんきょ）します</p>\n<p>讨厌：嫌（きら）い</p>\n<p>不讨厌：嫌いじゃない</p>\n<p>喜欢：好（す）き</p>\n<p>不喜欢：好きじゃない</p>\n<p>来自：から</p>\n",r:{minutes:.13,words:39},t:"动词",y:"a"}}],["/Japanese/%E5%90%8D%E8%AF%8D.html",{loader:()=>e.e(834).then(e.bind(e,5289)),meta:{d:1715266949e3,c:"日语",e:"<p>名词</p>\n<h1><strong>人称代词</strong></h1>\n<p>我： 私(わたし)</p>\n<p>僕 (ぼく)</p>\n<p>俺 (おれ)</p>\n<p>我们：</p>\n<p>你： あなた 不知道对方姓名时用</p>\n<p>你们：あなた方(かた)</p>\n<p>他：彼 (かれ)</p>\n<p>他们：彼ら(かれら)</p>\n<p>她：彼女(かのじょ)</p>\n<h1><strong>方位词</strong></h1>\n<p>上面 上(うえ)</p>\n<p>下面 下(した)</p>\n<p>前面 前(まえ)</p>\n<p>后面 後(うし)ろ</p>\n<p>旁边 隣 (となり)</p>",r:{minutes:.87,words:262},t:"人称代词",y:"a"}}],["/Japanese/%E5%BD%A2%E5%AE%B9%E8%AF%8D.html",{loader:()=>e.e(414).then(e.bind(e,8814)),meta:{d:1715266949e3,c:"日语",e:"\n<p>（身体/精神）好 元気</p>\n<p>便宜 やすい</p>\n<p>高(たか)い</p>\n<p>からい</p>\n<p>まずい</p>\n<p>美味しい</p>\n",r:{minutes:.06,words:19},t:"形容词",y:"a"}}],["/Japanese/%E8%A1%A8%E8%BE%BE.html",{loader:()=>e.e(478).then(e.bind(e,8019)),meta:{d:1715266949e3,c:"日语",e:"\n<h2>礼貌语言</h2>\n<ol>\n<li>\n<p>方 (かた)</p>\n<pre><code>人(ひと)--\\&gt;方(かた)\n</code></pre>\n</li>\n<li>\n<p>询问年龄</p>\n</li>\n</ol>\n<p>何 歳(さい) ですか</p>\n<p>礼貌语言 おいくつですか</p>\n<p>直接问孩子一般用 いくつ  或 何 歳</p>\n<h2>どうぞ</h2>\n<p>用于给对方物品，或劝对方进餐</p>\n",r:{minutes:.16,words:48},t:"表达",y:"a"}}],["/Japanese/%E8%AF%AD%E6%B3%95.html",{loader:()=>e.e(914).then(e.bind(e,8273)),meta:{d:1715266949e3,c:"日语",e:"\n<h2><strong>これ/それ/あれ は 名です</strong></h2>\n<p>指示事物的词。相当于汉语的“这、这个”“那、那个”。</p>\n<p>其用法如下:</p>\n<p><em>（1）说话人和听话人相隔一段距离，面对面时</em></p>\n<p>■これ：距说话人较近的事物[说话人的范围、领域内的事物]</p>\n<p>■それ:距听话人较近的事物[听话人的范围、领域内的事物】</p>\n<p>■あれ：距说话人和听话人都比较远的事物[不属于任何一方范围、领域内的事物】</p>\n<p><em>（2）说话人和听话人位于同一位置，面向同一方向时</em></p>\n<p>■これ：距说话人、听话人较近的事物</p>",r:{minutes:1,words:301},t:"语法",y:"a"}}],["/algorithm/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.html",{loader:()=>e.e(83).then(e.bind(e,2689)),meta:{d:1716381703e3,c:"算法",e:"\n<p>广度优先搜索（Breadth First Search，简称BFS）是一种用于遍历或搜索树或图的算法。它从树的根（或图中的某个节点）开始，探索邻近的节点，然后再对每个邻近节点做同样的操作，层层递进。这个过程持续进行，直到找到目标节点或遍历完所有节点。</p>\n<p>BFS的核心思想是使用队列来实现搜索过程。在搜索的每一步中，算法都会取出队列中的第一个节点，检查它是否为目标节点，如果不是，就将其所有未访问过的邻近节点加入队列。这样，队列中的节点就像是在按层次扩展，先进入队列的节点会先被探索。</p>\n<p>这种搜索策略不仅可以用来确定从源节点到目标节点是否存在路径，还可以用来找到最短路径，因为在无权图中，BFS首次访问到的路径便是最短路径。</p>",r:{minutes:3.82,words:1146},t:"广度优先搜索",O:3,y:"a"}}],["/algorithm/",{loader:()=>e.e(470).then(e.bind(e,1123)),meta:{a:"MistyStar",d:1715266949e3,c:"算法",e:"\n<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th></th>\n<th>时间复杂度</th>\n<th></th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n<th>代码复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>最坏</td>\n<td>平均</td>\n<td>最好</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td>n^2</td>\n<td>n^2</td>\n<td>n</td>\n<td>1</td>\n<td>稳定</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>直接选择排序</td>\n<td>n^2</td>\n<td>n^2</td>\n<td>n^2</td>\n<td>1</td>\n<td>不稳定</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>直接插入排序</td>\n<td>n^2</td>\n<td>n^2</td>\n<td>n^2</td>\n<td>1</td>\n<td>稳定</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>折半插入排序</td>\n<td>n^2</td>\n<td>n^2</td>\n<td>n</td>\n<td>1</td>\n<td>稳定</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>n^2</td>\n<td>nlogn</td>\n<td>nlogn</td>\n<td>平均logn,最坏n</td>\n<td>不稳定</td>\n<td>较复杂</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>nlogn</td>\n<td>nlogn</td>\n<td>nlogn</td>\n<td>1</td>\n<td>不稳定</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>nlogn</td>\n<td>nlogn</td>\n<td>nlogn</td>\n<td>n</td>\n<td>稳定</td>\n<td>较复杂</td>\n</tr>\n</tbody>\n</table>",r:{minutes:16.42,words:4925},t:"排序算法",y:"a"}}],["/algorithm/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.html",{loader:()=>e.e(201).then(e.bind(e,7607)),meta:{d:1716381703e3,c:"算法",e:'\n<p>深度优先搜索算法（Depth-First Search，简称DFS）是一种用于遍历或搜索树或图的算法。这个算法会尽可能深地搜索树的分支。当节点v的所在边都已被探寻过，搜索将回溯到发现节点v的那条边的起始节点。整个过程反复进行直到所有节点都被访问为止。DFS属于盲目搜索，最糟糕的情况算法时间复杂度为O(n!)。</p>\n<p>基本思想是为了求得问题的解，先选择某一种可能情况向前探索；在探索过程中，一旦发现原来的选择是错误的，就退回一步重新选择，继续向前探索；如此反复进行，直至得到解或证明无解。</p>\n<p>(1) <a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224976" target="_blank" rel="noopener noreferrer">深度优先搜索_百度百科</a>.\n(2) <a href="https://blog.csdn.net/qq_47733361/article/details/123858318" target="_blank" rel="noopener noreferrer">DFS (深度优先搜索) 算法详解 + 模板 + 例题，这一篇就够了_dfs算法-CSDN博客</a>.\n(3) <a href="https://zh.wikipedia.org/zh-hans/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener noreferrer">深度优先搜索 - 维基百科，自由的百科全书</a>.\n(4) <a href="https://oi-wiki.org/graph/dfs/." target="_blank" rel="noopener noreferrer">DFS（图论） - OI Wiki</a>.</p>',r:{minutes:4.99,words:1496},t:"深度优先搜索",O:2,y:"a"}}],["/cyber/CTF%E2%80%94%E2%80%94HTTP%E5%8F%91%E9%80%81%E5%A4%B4Headers%E6%95%B4%E7%90%86.html",{loader:()=>e.e(279).then(e.bind(e,5245)),meta:{d:1716479642e3,e:'\n<h2>http —请求header大全</h2>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Header</th>\n<th style="text-align:center">解释</th>\n<th style="text-align:center">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">Accept</td>\n<td style="text-align:center">指定客户端可以接收的内容类型</td>\n<td style="text-align:center">Accept: text/plain, text/html</td>\n</tr>\n<tr>\n<td style="text-align:center">Accept-Charset</td>\n<td style="text-align:center">浏览器能够接受的字符编码集。</td>\n<td style="text-align:center">Accept-Charset: iso-8859-5</td>\n</tr>\n<tr>\n<td style="text-align:center">Accept-Encoding</td>\n<td style="text-align:center">指定浏览器能够支持的web服务器返回内容压缩编码类型。</td>\n<td style="text-align:center">Accept-Encoding: compress, gzip</td>\n</tr>\n<tr>\n<td style="text-align:center">Accept-Language</td>\n<td style="text-align:center">浏览器可接受的语言</td>\n<td style="text-align:center">Accept-Language: en,zh</td>\n</tr>\n<tr>\n<td style="text-align:center">Accept-Ranges</td>\n<td style="text-align:center">能够请求网页实体的一个或者多个子范围字段</td>\n<td style="text-align:center">Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td style="text-align:center">Authorization</td>\n<td style="text-align:center">HTTP受权的受权证书</td>\n<td style="text-align:center">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>\n</tr>\n<tr>\n<td style="text-align:center">Cache-Control</td>\n<td style="text-align:center">指定请求和响应遵循的缓存机制</td>\n<td style="text-align:center">Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td style="text-align:center">Connection</td>\n<td style="text-align:center">表示是否须要持久链接。（HTTP 1.1默认进行持久链接）</td>\n<td style="text-align:center">Connection: close</td>\n</tr>\n<tr>\n<td style="text-align:center">Cookie</td>\n<td style="text-align:center">HTTP请求发送时，会把保存在该请求域名下的全部cookie值一块儿发送给web服务器。</td>\n<td style="text-align:center">Cookie: $Version=1; Skin=new;</td>\n</tr>\n<tr>\n<td style="text-align:center">Content-Length</td>\n<td style="text-align:center">请求的内容长度</td>\n<td style="text-align:center">Content-Length: 348</td>\n</tr>\n<tr>\n<td style="text-align:center">Content-Type</td>\n<td style="text-align:center">请求的与实体对应的MIME信息</td>\n<td style="text-align:center">Content-Type: application/x-www-form-urlencoded</td>\n</tr>\n<tr>\n<td style="text-align:center">Date</td>\n<td style="text-align:center">请求发送的日期和时间</td>\n<td style="text-align:center">Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td style="text-align:center">Expect</td>\n<td style="text-align:center">请求的特定的服务器行为</td>\n<td style="text-align:center">Expect: 100-continue</td>\n</tr>\n<tr>\n<td style="text-align:center">From</td>\n<td style="text-align:center">发出请求的用户的Email</td>\n<td style="text-align:center">From: user@email.com</td>\n</tr>\n<tr>\n<td style="text-align:center">Host</td>\n<td style="text-align:center">指定请求的服务器的域名和端口号</td>\n<td style="text-align:center">Host: www.zcmhi.com</td>\n</tr>\n<tr>\n<td style="text-align:center">If-Match</td>\n<td style="text-align:center">只有请求内容与实体相匹配才有效</td>\n<td style="text-align:center">If-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td style="text-align:center">If-Modified-Since</td>\n<td style="text-align:center">若是请求的部分在指定时间以后被修改则请求成功，未被修改则返回304代码</td>\n<td style="text-align:center">If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td style="text-align:center">If-None-Match</td>\n<td style="text-align:center">若是内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>\n<td style="text-align:center">If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td style="text-align:center">If-Range</td>\n<td style="text-align:center">若是实体未改变，服务器发送客户端丢失的部分，不然发送整个实体。参数也为Etag</td>\n<td style="text-align:center">If-Range: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td style="text-align:center">If-Unmodified-Since</td>\n<td style="text-align:center">只在实体在指定时间以后未被修改才请求成功</td>\n<td style="text-align:center">If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td style="text-align:center">Max-Forwards</td>\n<td style="text-align:center">限制信息经过代理和网关传送的时间</td>\n<td style="text-align:center">Max-Forwards: 10</td>\n</tr>\n<tr>\n<td style="text-align:center">Pragma</td>\n<td style="text-align:center">用来包含实现特定的指令</td>\n<td style="text-align:center">Pragma: no-cache</td>\n</tr>\n<tr>\n<td style="text-align:center">Proxy-Authorization</td>\n<td style="text-align:center">链接到代理的受权证书</td>\n<td style="text-align:center">Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>\n</tr>\n<tr>\n<td style="text-align:center">Range</td>\n<td style="text-align:center">只请求实体的一部分，指定范围</td>\n<td style="text-align:center">Range: bytes=500-999</td>\n</tr>\n<tr>\n<td style="text-align:center">Referer</td>\n<td style="text-align:center">先前网页的地址，当前请求网页紧随其后,即来路</td>\n<td style="text-align:center">Referer: http://www.zcmhi.com/archives/71.html</td>\n</tr>\n<tr>\n<td style="text-align:center">TE</td>\n<td style="text-align:center">客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>\n<td style="text-align:center">TE: trailers,deflate;q=0.5</td>\n</tr>\n<tr>\n<td style="text-align:center">Upgrade</td>\n<td style="text-align:center">向服务器指定某种传输协议以便服务器进行转换（若是支持）</td>\n<td style="text-align:center">Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>\n</tr>\n<tr>\n<td style="text-align:center">User-Agent</td>\n<td style="text-align:center">User-Agent的内容包含发出请求的用户信息</td>\n<td style="text-align:center">User-Agent: Mozilla/5.0 (Linux; X11)</td>\n</tr>\n<tr>\n<td style="text-align:center">Via</td>\n<td style="text-align:center">通知中间网关或代理服务器地址，通讯协议</td>\n<td style="text-align:center">Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>\n</tr>\n<tr>\n<td style="text-align:center">Warning</td>\n<td style="text-align:center">关于消息实体的警告信息</td>\n<td style="text-align:center">Warn: 199 Miscellaneous warning</td>\n</tr>\n<tr>\n<td style="text-align:center">X-Forwarded-For</td>\n<td style="text-align:center">用来说明从哪里来的，一般用来内网伪装</td>\n<td style="text-align:center">X-Forwarded-For: 127.0.0.1</td>\n</tr>\n</tbody>\n</table>',r:{minutes:7.51,words:2252},t:"CTF——HTTP发送头Headers整理",y:"a"}}],["/cyber/Http%E4%BC%AA%E9%80%A0IP%E5%A4%B4%E5%A4%A7%E5%85%A8.html",{loader:()=>e.e(200).then(e.bind(e,1258)),meta:{d:1716479642e3,e:"\n<p>X-Forwarded-For:127.0.0.1</p>\n<p>X-Forwarded:127.0.0.1</p>\n<p>Forwarded-For:127.0.0.1</p>\n<p>Forwarded:127.0.0.1</p>\n<p>X-Forwarded-Host:127.0.0.1</p>\n<p>X-remote-IP:127.0.0.1</p>\n<p>X-remote-addr:127.0.0.1</p>\n<p>True-Client-IP:127.0.0.1</p>\n<p>X-Client-IP:127.0.0.1</p>\n<p>Client-IP:127.0.0.1</p>",r:{minutes:.29,words:87},t:"HTTP伪造IP头大全",y:"a"}}],["/datastruc/%E5%93%88%E5%B8%8C%E8%A1%A8.html",{loader:()=>e.e(438).then(e.bind(e,4779)),meta:{d:1715266949e3,c:"数据结构",e:"\n<p>哈希表（Hash Table），也称为散列表，是一种数据结构，它可以提供非常快速的数据插入和查找操作。哈希表通过一个称为哈希函数（Hash Function）的算法，将键（Key）转换为数组索引，从而能够快速定位到数据的存储位置。</p>\n<p>在哈希表中，每个键值对（Key-Value Pair）都被哈希函数映射到表中的一个位置，以便快速访问。但是，由于不同的键可能会被映射到同一个位置，这就产生了所谓的哈希冲突（Hash Collision）。为了解决冲突，有几种方法可以使用，如链地址法（Chaining）和开放地址法（Open Addressing）。</p>\n<p>链地址法是在冲突发生的索引处使用链表来存储所有映射到该索引的元素。而开放地址法则是寻找另一个空闲的位置来存储冲突的元素。</p>",r:{minutes:5.25,words:1575},t:"哈希表",O:6,y:"a"}}],["/datastruc/%E6%A0%88.html",{loader:()=>e.e(906).then(e.bind(e,5620)),meta:{d:1715266949e3,c:"数据结构",e:"\n<p>栈（Stack）是一种只允许在一端进行插入或删除操作的线性表。这种结构具有后进先出（Last In First Out, LIFO）的特性，意味着最后插入的元素将是第一个被删除的。在栈中，插入和删除操作通常发生在同一端，称为栈顶，而另一端则被称为栈底。</p>\n<p>栈的基本操作包括：</p>\n<ul>\n<li><strong>初始化</strong>（InitStack）：创建一个空栈。</li>\n<li><strong>判空</strong>（Empty）：检查栈是否为空。</li>\n<li><strong>进栈</strong>（Push）：在栈顶添加一个元素。</li>\n<li><strong>出栈</strong>（Pop）：移除栈顶的元素。</li>\n<li><strong>读栈顶元素</strong>（GetTop）：获取栈顶元素的值，但不移除它。</li>\n<li><strong>销毁栈</strong>（DestroyStack）：移除栈中的所有元素，并释放内存。</li>\n</ul>",r:{minutes:1.35,words:406},t:"栈",O:1,y:"a"}}],["/datastruc/%E6%A0%91.html",{loader:()=>e.e(673).then(e.bind(e,5960)),meta:{d:1717125442e3,e:"\n<h2>二叉树</h2>\n<h3>二叉树的遍历</h3>\n<p>先左后右，根对序</p>\n<ol>\n<li>前序遍历 根左右</li>\n<li>中序遍历 左根右</li>\n<li>后序遍历 左右根</li>\n<li>层序遍历  按层的顺序遍历</li>\n</ol>\n<h3>二叉搜索树</h3>\n<p><strong>二叉搜索树</strong>（Binary Search Tree，BST），也称为二叉排序树或二叉查找树，是一种特殊的二叉树。它具有以下性质：</p>\n<ul>\n<li>每个节点都有一个键值，且每个节点的键值都是唯一的。</li>\n<li>任意节点的左子树中的所有节点的键值都<strong>小于</strong>该节点的键值。</li>\n<li>任意节点的右子树中的所有节点的键值都<strong>大于</strong>该节点的键值。</li>\n<li>左子树和右子树也都是二叉搜索树。</li>\n</ul>",r:{minutes:6.75,words:2025},t:"树",y:"a"}}],["/datastruc/%E9%93%BE%E8%A1%A8.html",{loader:()=>e.e(590).then(e.bind(e,647)),meta:{d:1715266949e3,c:"数据结构",e:"\n<h2>C++ STL 之 List</h2>\n<h3>一、list 的介绍</h3>\n<p>list 是 STL 中的一个序列容器，实现的是双向链表，每个元素都有两个指针，分别指向元素的前驱和后继。</p>\n<p>list 不需要指定内存大小，因为他存储在不连续的内存空间中，并由指针将他们连接在一起。</p>\n<p>由于链表的特点，不能进行内部的随机访问，无法通过位置来访问元素，即不支持[ ] 操作符和vector.at() 操作，必须逐个遍历，可以通过开始元素或者最后一个元素遍历，它的查找要在O(n)的时间才能完成。但它允许序列快速在任意位置进行插入和删除操作作，包括在两边的pop()和push()操作。</p>",r:{minutes:6.26,words:1878},t:"链表",O:5,y:"a"}}],["/datastruc/%E9%98%9F%E5%88%97.html",{loader:()=>e.e(622).then(e.bind(e,4237)),meta:{d:1715266949e3,c:"数据结构",e:"\n<p>队列是一种特殊的线性表，它只允许在表的一端（队尾）进行插入操作，而在表的另一端（队头）进行删除操作。队列遵循先进先出（First In First Out, FIFO）的原则，即先进入队列的元素将会最先被删除。在队列中，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。</p>\n<p>队列可以通过多种方式实现，包括顺序存储结构（如数组）和链式存储结构（如链表）。顺序队列使用一组连续的存储单元按顺序存放队列元素，而链队列则由一系列节点组成，每个节点包含数据和指向下一个节点的指针。</p>\n<p>(1) 【数据结构】队列(顺序队列、循环队列、链队列）_顺序队列的定义-CSDN博客. https://blog.csdn.net/Jacky_Feng/article/details/108595654.\n(2) 【数据结构入门】队列（Queue）详解（定义、销毁、入队、出队等）| 图解数据结构，超详细哦~-CSDN博客. https://blog.csdn.net/weixin_48025315/article/details/120277050.\n(3) 队列的定义-CSDN博客. https://blog.csdn.net/ZCMUCZX/article/details/80920876.</p>",r:{minutes:3.18,words:954},t:"队列",O:2,y:"a"}}],["/cyber/Network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.html",{loader:()=>e.e(271).then(e.bind(e,7220)),meta:{d:1715526892e3,c:"计算机网络",e:"\n<h2>概念和功能</h2>\n<ul>\n<li>\n<p>基础概念</p>\n<ul>\n<li>\n<p>数据链路层的地位</p>\n</li>\n<li>\n<p>链路与数据链路</p>\n</li>\n<li>\n<p>PDU-帧</p>\n</li>\n</ul>\n</li>\n<li>\n<p>两种信道</p>\n<ul>\n<li>\n<p>广播信道（CSMA/CD协议）</p>\n</li>\n<li>\n<p>点对点信道（PPP协议）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>三种基本问题</p>\n<ul>\n<li>\n<p>封装成帧</p>\n<ul>\n<li>\n<p>最大传送单元MTU</p>\n<ul>\n<li>\n<p>限制帧中数据部分的最大长度</p>\n</li>\n<li>\n<p>MTU = IP层 + 全部数据</p>\n</li>\n<li>\n<p>默认值：1500</p>\n</li>\n</ul>\n</li>\n<li>\n<p>帧界定</p>\n</li>\n</ul>\n</li>\n<li>\n<p>透明传输</p>\n<ul>\n<li>\n<p>组帧方式</p>\n<ul>\n<li>\n<p>字符计数法</p>\n<ul>\n<li>\n<p>缺点：一步错，步步错</p>\n</li>\n<li>\n<p>每一段数据流的第一位定义帧长度</p>\n</li>\n</ul>\n</li>\n<li>\n<p>字符（字节）填充法</p>\n<ul>\n<li>在数据中出现的SOH/EOT前填充一个转义字符ESC</li>\n</ul>\n</li>\n<li>\n<p>零比特填充法</p>\n<ul>\n<li>每5个1后填充1个0</li>\n</ul>\n</li>\n<li>\n<p>违规编码法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>差错检测</p>\n<ul>\n<li>\n<p>差错</p>\n<ul>\n<li>\n<p>位错（比特差错）</p>\n</li>\n<li>\n<p>帧错</p>\n<ul>\n<li>\n<p>帧丢失</p>\n</li>\n<li>\n<p>帧重复</p>\n</li>\n<li>\n<p>帧失序</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>检测</p>\n<ul>\n<li>\n<p>循环冗余检验CRC</p>\n<ul>\n<li>\n<p>1.计算：在k位原始数据后拼接n个0 后 除以 约定好的n+1 位的除数</p>\n</li>\n<li>\n<p>2.拼接：在原始数据后拼接计算好的冗余码</p>\n</li>\n<li>\n<p>3.发送后接受端校验余数</p>\n</li>\n</ul>\n</li>\n<li>\n<p>冗余码</p>\n<ul>\n<li>帧检验序列FCS</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>纠错</p>\n<ul>\n<li>\n<p>差错控制编码（信道编码）</p>\n<ul>\n<li>引入冗余</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",r:{minutes:4.48,words:1344},t:"数据链路层",O:3,y:"a"}}],["/cyber/Network/%E6%A6%82%E8%BF%B0.html",{loader:()=>e.e(802).then(e.bind(e,7657)),meta:{d:1715771743e3,c:"计算机网络",e:"\n<h2>网络概述</h2>\n<h3>计算机网络概念</h3>\n<ul>\n<li>计算机网络是互连的，自治的计算机集合</li>\n</ul>\n<h3>标准化工作及相关组织</h3>\n<h3>计算机网络组成</h3>\n<ul>\n<li>\n<p>组成部分</p>\n<ul>\n<li>硬件、软件、协议</li>\n</ul>\n</li>\n<li>\n<p>工作方式</p>\n<ul>\n<li>\n<p>边缘部分（用户直接使用</p>\n<ul>\n<li>\n<p>C/S</p>\n</li>\n<li>\n<p>P2P（Peer to Peer）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>接入网</p>\n<ul>\n<li>\n<p>有线接入</p>\n</li>\n<li>\n<p>无线接入</p>\n</li>\n</ul>\n</li>\n<li>\n<p>核心部分（为边缘提供服务）</p>\n<ul>\n<li>\n<p>电路交换</p>\n</li>\n<li>\n<p>报文交换</p>\n</li>\n<li>\n<p>分组交换</p>\n<ul>\n<li>\n<p>数据报方式</p>\n</li>\n<li>\n<p>虚电路方式</p>\n</li>\n<li>\n<p>特点：每个分组能在互联网中独立地选择传输路径</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>功能组成</p>\n<ul>\n<li>\n<p>通信子网 实现数据通信</p>\n</li>\n<li>\n<p>资源子网 实现资源共享</p>\n</li>\n</ul>\n</li>\n</ul>",r:{minutes:3.21,words:962},t:"网络概述",O:1,y:"a"}}],["/cyber/Network/%E7%89%A9%E7%90%86%E5%B1%82.html",{loader:()=>e.e(33).then(e.bind(e,2674)),meta:{d:1715771743e3,c:"计算机网络",e:"\n<h2>物理层概念</h2>\n<h3>4个特性</h3>\n<ul>\n<li>\n<p>机械特性</p>\n</li>\n<li>\n<p>电气特性</p>\n</li>\n<li>\n<p>功能特性</p>\n</li>\n<li>\n<p>过程特性</p>\n</li>\n</ul>\n<h2>数通基础</h2>\n<h3>常用术语</h3>\n<ul>\n<li>\n<p>消息</p>\n</li>\n<li>\n<p>数据</p>\n</li>\n<li>\n<p>信号</p>\n</li>\n<li>\n<p>信源</p>\n</li>\n<li>\n<p>信宿</p>\n</li>\n<li>\n<p>信道</p>\n</li>\n</ul>\n<h3>通信系统</h3>",r:{minutes:.51,words:154},t:"物理层",O:2,y:"a"}}],["/cyber/Network/%E7%BD%91%E7%BB%9C%E5%B1%82.html",{loader:()=>e.e(519).then(e.bind(e,6831)),meta:{d:1715771743e3,c:"计算机网络",e:"\n<h2>概述</h2>\n<h3>两个观点</h3>\n<ul>\n<li>\n<p>让网络负责可靠交付</p>\n</li>\n<li>\n<p>网络提供数据报服务</p>\n</li>\n</ul>\n<h3>两种服务</h3>\n<ul>\n<li>\n<p>虚电路服务</p>\n</li>\n<li>\n<p>数据报服务</p>\n</li>\n</ul>\n<h3>两个层面</h3>\n<ul>\n<li>\n<p>控制面</p>\n</li>\n<li>\n<p>转发面（数据面</p>\n</li>\n</ul>\n<h2>网际协议IP</h2>\n<h3>虚拟互连网络</h3>\n<h3>IP地址</h3>\n<ul>\n<li>\n<p>32位</p>\n</li>\n<li>\n<p>二级结构</p>\n<ul>\n<li>网络号，主机号</li>\n</ul>\n</li>\n<li>\n<p>分类</p>\n<ul>\n<li>\n<p>A类</p>\n<ul>\n<li>\n<p>前8位网络号，第一位为0</p>\n<ul>\n<li>1～126</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>B类</p>\n<ul>\n<li>\n<p>前16位网络号，前两位为10</p>\n<ul>\n<li>128.1～191.255</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>C类</p>\n<ul>\n<li>\n<p>前24位网络号，前三位为110</p>\n<ul>\n<li>192.0.1~223.255.255</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>D类</p>\n<ul>\n<li>\n<p>多播地址</p>\n<ul>\n<li>前4位为1110</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>E类</p>\n<ul>\n<li>\n<p>保留地址</p>\n<ul>\n<li>前4位为1111</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>专有地址</p>\n<ul>\n<li>\n<p>10.0.0.0~10.255.255.255</p>\n</li>\n<li>\n<p>172.16.0.0~172.32.255.255</p>\n</li>\n<li>\n<p>192.168.0.0~192.168.255.255</p>\n</li>\n</ul>\n</li>\n<li>\n<p>特殊地址</p>\n<ul>\n<li>\n<p>全1</p>\n<ul>\n<li>在本网络上广播，路由器不转发</li>\n</ul>\n</li>\n<li>\n<p>主机号全1</p>\n<ul>\n<li>对本网络号上的所有主机广播</li>\n</ul>\n</li>\n<li>\n<p>全0</p>\n<ul>\n<li>网络主机</li>\n</ul>\n</li>\n<li>\n<p>主机号全0</p>\n<ul>\n<li>本网络上的某台主机</li>\n</ul>\n</li>\n<li>\n<p>127.0.0.1</p>\n<ul>\n<li>环回地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",r:{minutes:7.53,words:2260},t:"网络层",O:4,y:"a"}}],["/404.html",{loader:()=>e.e(490).then(e.bind(e,4510)),meta:{t:""}}],["/Japanese/",{loader:()=>e.e(470).then(e.bind(e,5783)),meta:{t:"Japanese"}}],["/cyber/",{loader:()=>e.e(470).then(e.bind(e,4927)),meta:{t:"Cyber"}}],["/datastruc/",{loader:()=>e.e(470).then(e.bind(e,4689)),meta:{t:"Datastruc"}}],["/cyber/Network/",{loader:()=>e.e(470).then(e.bind(e,8584)),meta:{t:"Network"}}],["/category/",{loader:()=>e.e(470).then(e.bind(e,905)),meta:{t:"分类",I:!1}}],["/category/docker/",{loader:()=>e.e(470).then(e.bind(e,4309)),meta:{t:"Docker 分类",I:!1}}],["/category/%E6%97%A5%E8%AF%AD/",{loader:()=>e.e(470).then(e.bind(e,8304)),meta:{t:"日语 分类",I:!1}}],["/category/%E7%AE%97%E6%B3%95/",{loader:()=>e.e(470).then(e.bind(e,7102)),meta:{t:"算法 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{loader:()=>e.e(470).then(e.bind(e,4170)),meta:{t:"数据结构 分类",I:!1}}],["/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{loader:()=>e.e(470).then(e.bind(e,5416)),meta:{t:"计算机网络 分类",I:!1}}],["/tag/",{loader:()=>e.e(470).then(e.bind(e,4103)),meta:{t:"标签",I:!1}}],["/article/",{loader:()=>e.e(470).then(e.bind(e,9574)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>e.e(470).then(e.bind(e,3639)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>e.e(470).then(e.bind(e,3931)),meta:{t:"时间轴",I:!1}}]])},8761:(n,t,e)=>{e.d(t,{U:()=>l});const l=JSON.parse('{"base":"/","lang":"zh-CN","title":"MistyStar","description":"","head":[["link",{"rel":"icon","href":"/Asuka.png"}]],"locales":{}}')},6653:(n,t,e)=>{e.d(t,{K:()=>l});const l=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$L.A6nW2O5.vCCoNKQePK6.LWQgYue9Aums9SmDFcNu4GX2e6yU4FO"]}},"author":{"name":"MistyStar","url":"https://mister-hope.com"},"logo":"Asuka.png","repo":"Misty-Star/Misty-Star.github.io","docsDir":"src","footer":"Misty\'s Blog","displayFooter":true,"blog":{"description":"弱鸡大学牲","intro":"/intro.html","medias":{"QQ":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1278734874","BiliBili":"https://space.bilibili.com/44950466","Steam":"https://steamcommunity.com/profiles/76561198853793634/","Discord":"https://discord.com/users/1108379805453393962","GitHub":"https://github.com/Misty-Star","Email":"mailto:1278734974@qq.com"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/",{"text":"计算机","icon":"laptop-code","children":[{"text":"算法","icon":"laptop-code","link":"algorithm/"},{"text":"数据结构","icon":"laptop-code","link":"datastruc/"}]},{"text":"网络安全","icon":"laptop-code","link":"cyber/"},{"text":"日语","icon":"book","link":"Japanese/"},{"text":"英语","icon":"book","link":"English/ "}],"sidebar":{"/":["","intro"],"/cyber/":[{"text":"网络安全","icon":"laptop-code","children":[{"text":"计算机网络","prefix":"Network/","children":"structure"}]}],"/algorithm/":[{"text":"算法","icon":"laptop-code","children":"structure"}],"/datastruc/":[{"text":"数据结构","icon":"laptop-code","children":"structure"}],"/Japanese/":"structure","/English/":"structure"}}}}')},8123:(n,t,e)=>{e.d(t,{v:()=>l});const l={"/cyber/Network/":["概述","物理层","数据链路层","网络层"],"/algorithm/":["/algorithm/","深度优先搜索","广度优先搜索"],"/datastruc/":["栈","队列","链表","哈希表","树"],"/Japanese/":["名词","动词","形容词","表达","语法"],"/English/":[]}},2878:(n,t,e)=>{e.d(t,{P:()=>l});const l={QQ:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qq-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5eaade"/><path fill="#fff" d="M805.25 585.542c-15-48.188-32.25-88.688-58.781-154.97 4.125-174.093-68.25-314.905-234.938-314.905-168.562 0-239.344 143.625-234.844 314.906-26.625 66.375-43.78 106.594-58.78 154.969-31.876 102.656-21.563 145.125-13.688 146.062 16.875 2.063 65.718-77.25 65.718-77.25 0 45.938 23.625 105.844 74.813 149.063-24.75 7.593-80.344 28.03-67.125 50.437 10.688 18.094 183.938 11.531 233.906 5.906 49.969 5.625 223.219 12.188 233.906-5.906 13.22-22.312-42.468-42.844-67.125-50.437 51.188-43.313 74.813-103.22 74.813-149.063 0 0 48.844 79.313 65.719 77.25 7.969-1.031 18.281-43.5-13.594-146.062z"/></svg>',BiliBili:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bilibili-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1296db"/><path fill="#fff" d="M745.363 177.725a47 47 0 0 1 0 66.3L702.5 286.85h44A141 141 0 0 1 887 427.512v281.25a141 141 0 0 1-141 140.626H277.25A141 141 0 0 1 137 708.763v-281.25a141 141 0 0 1 141-141h43.725l-42.788-42.825a47 47 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a47 47 0 0 1 66.3 0zm1.012 203.25h-468.75a47 47 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a47 47 0 0 0 46.763-43.387l.112-3.487v-281.25c0-26-21-47-47-46.876zm-375 93.75c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47zm281.25 0c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47z"/></svg>',Steam:'<svg xmlns="http://www.w3.org/2000/svg" class="icon steam-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="488" fill="#fff"/><path fill="#13227a" d="M1008 512c0 274-222.4 496-496.8 496-227.6 0-419.2-152.6-478-360.8l190.4 78.6c12.8 64.2 69.8 112.8 137.8 112.8 78.4 0 143.8-64.8 140.4-147l169-120.4c104.2 2.6 191.6-81.8 191.6-187 0-103.2-84-187-187.4-187s-187.4 84-187.4 187v2.4L369.2 558c-31-1.8-61.4 6.8-87 24.2L16 472.2C36.4 216.8 250.2 16 511.2 16 785.6 16 1008 238 1008 512zM327.4 768.6l-61-25.2a105.58 105.58 0 0 0 54.4 51.6c53.8 22.4 115.6-3.2 138-56.8 10.8-26 11-54.6.2-80.6-10.8-26-31-46.4-57-57.2-25.8-10.8-53.4-10.4-77.8-1.2l63 26c39.6 16.4 58.4 61.8 41.8 101.4-16.6 39.8-62 58.4-101.6 42zM675 508.8c-68.8 0-124.8-56-124.8-124.6s56-124.6 124.8-124.6 124.8 56 124.8 124.6S744 508.8 675 508.8zm.2-31.2c51.8 0 93.8-42 93.8-93.6 0-51.8-42-93.6-93.8-93.6s-93.8 42-93.8 93.6c.2 51.6 42.2 93.6 93.8 93.6z"/></svg>',Discord:'<svg xmlns="http://www.w3.org/2000/svg" class="icon discord-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2DAAE1"/><path fill="#fff" d="m422.935 240.147 5.851 8.052c-113.039 34.253-165.649 84.585-165.649 84.585s13.645-8.052 37.024-18.123c66.28-30.215 118.865-38.267 142.244-40.286 3.91 0 7.819-1.994 9.76-1.994 38.966-6.058 81.816-6.058 126.658-2.02 58.462 8.053 122.749 24.157 187.061 62.423 0 0-48.7-48.338-155.862-82.566l7.767-10.071h1.968c13.308.233 91.757 4.246 173.416 68.481 0 0 89.634 169.144 89.634 376.555 1.942-2.02-50.668 92.637-189.003 96.65 0 0-23.405-28.194-40.933-52.35 81.84-24.157 113.013-76.534 113.013-76.534a313.796 313.796 0 0 1-72.106 38.267c-31.172 14.11-60.403 22.162-89.633 28.22-60.404 12.066-114.955 8.027-161.74 0a636.81 636.81 0 0 1-91.576-28.22c-13.644-6.033-29.23-12.065-44.817-22.137-1.941-2.02-3.883-2.02-5.85-4.039-1.943 0-1.943-2.02-1.943-2.02-11.702-6.032-17.528-10.07-17.528-10.07s29.23 52.376 109.104 76.532c-19.47 24.157-40.907 54.371-40.907 54.371-138.36-4.039-190.97-98.67-190.97-98.67 0-207.41 89.633-376.555 89.633-376.555 89.634-70.5 175.384-68.481 175.384-68.481zm213.961 233.017c-35.315 0-65 34.512-65 78s29.412 78 65 78 65-34.512 65-78-29.412-78-65-78zm-233.016 0c-35.315 0-65 34.512-65 78s29.412 78 65 78 64.726-34.512 64.726-78-29.411-78-64.726-78z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>'}}},n=>{n.O(0,[338,191],(()=>(8731,n(n.s=8731)))),n.O()}]);