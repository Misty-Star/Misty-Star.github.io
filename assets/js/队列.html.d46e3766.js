"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[622],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},4237:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(641);const e=[(0,t.Fv)('<h1 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h1><p>队列是一种特殊的线性表，它只允许在表的一端（队尾）进行插入操作，而在表的另一端（队头）进行删除操作。队列遵循先进先出（First In First Out, FIFO）的原则，即先进入队列的元素将会最先被删除。在队列中，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。</p><p>队列可以通过多种方式实现，包括顺序存储结构（如数组）和链式存储结构（如链表）。顺序队列使用一组连续的存储单元按顺序存放队列元素，而链队列则由一系列节点组成，每个节点包含数据和指向下一个节点的指针。</p><p>(1) 【数据结构】队列(顺序队列、循环队列、链队列）_顺序队列的定义-CSDN博客. https://blog.csdn.net/Jacky_Feng/article/details/108595654. (2) 【数据结构入门】队列（Queue）详解（定义、销毁、入队、出队等）| 图解数据结构，超详细哦~-CSDN博客. https://blog.csdn.net/weixin_48025315/article/details/120277050. (3) 队列的定义-CSDN博客. https://blog.csdn.net/ZCMUCZX/article/details/80920876.</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h3><p>在C++中，队列是一种先进先出（First In First Out, FIFO）的数据结构，它允许在队列的末尾添加元素，并从队列的开头移除元素。C++标准模板库（STL）中的<code>std::queue</code>是队列的一个实现，它提供了一系列用于操作队列的函数。</p><p>以下是<code>std::queue</code>的一些基本用法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>\n\n    <span class="token comment">// 向队列中添加元素</span>\n    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显示队列前端的元素</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;队列前端的元素是: &quot;</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token comment">// 移除队列前端的元素</span>\n    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 再次显示队列前端的元素</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;现在队列前端的元素是: &quot;</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token comment">// 检查队列是否为空</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;队列不为空&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 显示队列中的元素个数</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;队列中的元素个数是: &quot;</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个<code>int</code>类型的队列<code>q</code>，使用<code>push</code>函数向队列中添加了三个元素，然后使用<code>front</code>和<code>pop</code>函数来访问和移除队列前端的元素。我们还使用了<code>empty</code>函数来检查队列是否为空，以及<code>size</code>函数来获取队列中的元素个数。</p><p><code>std::queue</code>可以与不同类型的容器一起使用，但默认情况下，它是基于<code>s</code></p><p>td::deque<code>实现的。你也可以选择使用</code>std::list`作为底层容器来实现队列。</p><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h3><p>在Python中，<code>deque</code>（发音为&quot;deck&quot;，全称为double-ended queue，双端队列）是一种由<code>collections</code>模块提供的数据结构。它是一个线性容器，允许在两端快速添加（append）和删除（pop）元素。与普通的列表相比，<code>deque</code>在两端操作的时间复杂度为O(1)，这使得它在实现队列和栈时非常高效。</p><p>以下是<code>deque</code>的一些基本用法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque\n\n<span class="token comment"># 创建一个空的deque</span>\nd <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 在右端添加元素</span>\nd<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\nd<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 在左端添加元素</span>\nd<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 从右端移除元素并返回</span>\nr <span class="token operator">=</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 从左端移除元素并返回</span>\nl <span class="token operator">=</span> d<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 访问deque中的元素</span>\nfirst_element <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\nlast_element <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n\n<span class="token comment"># 长度</span>\nlength <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>\n\n<span class="token comment"># 清空deque</span>\nd<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 限制deque的大小，超出部分会从另一端弹出</span>\nlimited_deque <span class="token operator">=</span> deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>deque<code>还提供了其他一些有用的方法，如</code>rotate<code>可以旋转</code>deque<code>中的元素，</code>extend<code>和</code>extendleft<code>可以从一个可迭代对象中添加多个元素。由于其高效的性能，</code>deque`常用于需要快速添加和移除元素的场景，如在多线程编程中作为共享队列。</p>',17)],p={},o=(0,a(6262).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/datastruc/%E9%98%9F%E5%88%97.html","title":"队列","lang":"zh-CN","frontmatter":{"category":"数据结构","order":2,"description":"队列 队列是一种特殊的线性表，它只允许在表的一端（队尾）进行插入操作，而在表的另一端（队头）进行删除操作。队列遵循先进先出（First In First Out, FIFO）的原则，即先进入队列的元素将会最先被删除。在队列中，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。 队列可以通过多种方式实现，包括顺序存储结构（如数组）和链式存储结构（如...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/datastruc/%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"队列"}],["meta",{"property":"og:description","content":"队列 队列是一种特殊的线性表，它只允许在表的一端（队尾）进行插入操作，而在表的另一端（队头）进行删除操作。队列遵循先进先出（First In First Out, FIFO）的原则，即先进入队列的元素将会最先被删除。在队列中，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。 队列可以通过多种方式实现，包括顺序存储结构（如数组）和链式存储结构（如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T15:14:52.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-12T15:14:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-12T15:14:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"C++","slug":"c","link":"#c","children":[]},{"level":3,"title":"Python","slug":"python","link":"#python","children":[]}]}],"git":{"createdTime":1715266949000,"updatedTime":1715526892000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":2}]},"readingTime":{"minutes":3.18,"words":954},"filePathRelative":"datastruc/队列.md","localizedDate":"2024年5月9日","excerpt":"\\n<p>队列是一种特殊的线性表，它只允许在表的一端（队尾）进行插入操作，而在表的另一端（队头）进行删除操作。队列遵循先进先出（First In First Out, FIFO）的原则，即先进入队列的元素将会最先被删除。在队列中，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。</p>\\n<p>队列可以通过多种方式实现，包括顺序存储结构（如数组）和链式存储结构（如链表）。顺序队列使用一组连续的存储单元按顺序存放队列元素，而链队列则由一系列节点组成，每个节点包含数据和指向下一个节点的指针。</p>\\n<p>(1) 【数据结构】队列(顺序队列、循环队列、链队列）_顺序队列的定义-CSDN博客. https://blog.csdn.net/Jacky_Feng/article/details/108595654.\\n(2) 【数据结构入门】队列（Queue）详解（定义、销毁、入队、出队等）| 图解数据结构，超详细哦~-CSDN博客. https://blog.csdn.net/weixin_48025315/article/details/120277050.\\n(3) 队列的定义-CSDN博客. https://blog.csdn.net/ZCMUCZX/article/details/80920876.</p>","autoDesc":true}')}}]);