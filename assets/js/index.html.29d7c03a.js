"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[470],{6262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},5818:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>o});var t=s(641);const e=[(0,t.Fv)('<p>名词</p><h1 id="人称代词" tabindex="-1"><a class="header-anchor" href="#人称代词"><span><strong>人称代词</strong></span></a></h1><p>我： 私(わたし)</p><p>僕 (ぼく)</p><p>俺 (おれ)</p><p>我们：</p><p>你： あなた 不知道对方姓名时用</p><p>你们：あなた方(かた)</p><p>他：彼 (かれ)</p><p>他们：彼ら(かれら)</p><p>她：彼女(かのじょ)</p><h1 id="方位词" tabindex="-1"><a class="header-anchor" href="#方位词"><span><strong>方位词</strong></span></a></h1><p>上面 上(うえ)</p><p>下面 下(した)</p><p>前面 前(まえ)</p><p>后面 後(うし)ろ</p><p>旁边 隣 (となり)</p><p>中间 中(なか)</p><p>外面 外(そと)</p><h1 id="时间词" tabindex="-1"><a class="header-anchor" href="#时间词"><span><strong>时间词</strong></span></a></h1><p>星期日 日曜日(にちようび)</p><p>星期一 月曜日(げつようび)</p><p>星期二 火曜日(かようび)</p><p>星期三 水曜日(すいようび)</p><p>星期四 木曜日(もくようび)</p><p>星期五 金曜日(きんょうび)</p><p>星期六 土曜日(どようび)</p><p>小时 時(じ)</p><p>分钟 分(ふん/ぷん)1.3.4.6.8.10何分用ぷん</p><p>前天</p><p>昨日 きのう;さくじつ</p><p>今日 きよう</p><p>明日 あした</p><p>后天 あさつて</p><p>每天 每日まいにち</p><p>上上个星期 せんせんしゆう</p><p>上个星期 せんしゆう</p><p>这个星期 こんしゆう</p><p>下个星期 らいしゆう</p><p>下下个星期 さらいしゆう</p><p>月 げつ</p><p>早晨 朝(あさ)</p><p>中午：昼 (ひる)</p><p>夜晚（日落到日出） よる</p><p>晚上（日落到睡觉前） 晩(ばん)</p><p>今天早上 今朝(けさ)</p><p>昨晚 昨夜 ゆうべ</p><p>今天晚上 今晩 (こんばん)</p><p>现在 今 いま</p><p>最後 さいご</p><p>年 ねん</p><p>今年 ことし</p><p>春 はる</p><p>夏 なつ</p><p>秋 あき</p><p>冬 ふゆ</p><p>夜 よる</p><p>昼 ひる</p><h1 id="名词" tabindex="-1"><a class="header-anchor" href="#名词"><span><strong>名词</strong></span></a></h1><p>中国人(ちゆうごくじ)</p><p>日本人(にほんじん)</p><p>韩国人 韓国人 (かんこくじん)</p><p>学生 (がくせい)</p><p>老师 先生(せんせい)</p><p>教授(きようじゆ)</p><p>大学(だいがく)</p><p>职员 社員しやいん</p><p>公司职员 会社員かいしやいn</p><p>企业 きぎよう</p><p>店员 店員 (てんいん)</p><p>进修生 研修生(けんしゆうせい)</p><p>科长 かちよう</p><p>总经理，社长 しやちよう</p><p>仕事 しごと</p>',74)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/Japanese/4vcx7mtk/","title":"名词","lang":"zh-CN","frontmatter":{"title":"名词","category":"日语","author":"MistyStar","createTime":"2024/05/07 16:28:08","permalink":"/Japanese/4vcx7mtk/","description":"名词 人称代词 我： 私(わたし) 僕 (ぼく) 俺 (おれ) 我们： 你： あなた 不知道对方姓名时用 你们：あなた方(かた) 他：彼 (かれ) 他们：彼ら(かれら) 她：彼女(かのじょ) 方位词 上面 上(うえ) 下面 下(した) 前面 前(まえ) 后面 後(うし)ろ 旁边 隣 (となり) 中间 中(なか) 外面 外(そと) 时间词 星期日 日曜日...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/Japanese/4vcx7mtk/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"名词"}],["meta",{"property":"og:description","content":"名词 人称代词 我： 私(わたし) 僕 (ぼく) 俺 (おれ) 我们： 你： あなた 不知道对方姓名时用 你们：あなた方(かた) 他：彼 (かれ) 他们：彼ら(かれら) 她：彼女(かのじょ) 方位词 上面 上(うえ) 下面 下(した) 前面 前(まえ) 后面 後(うし)ろ 旁边 隣 (となり) 中间 中(なか) 外面 外(そと) 时间词 星期日 日曜日..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"名词\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\"}]}"]]},"headers":[],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"Japanese/名词.md","localizedDate":"2024年5月9日","excerpt":"<p>名词</p>\\n<h1><strong>人称代词</strong></h1>\\n<p>我： 私(わたし)</p>\\n<p>僕 (ぼく)</p>\\n<p>俺 (おれ)</p>\\n<p>我们：</p>\\n<p>你： あなた 不知道对方姓名时用</p>\\n<p>你们：あなた方(かた)</p>\\n<p>他：彼 (かれ)</p>\\n<p>他们：彼ら(かれら)</p>\\n<p>她：彼女(かのじょ)</p>\\n<h1><strong>方位词</strong></h1>\\n<p>上面 上(うえ)</p>\\n<p>下面 下(した)</p>\\n<p>前面 前(まえ)</p>\\n<p>后面 後(うし)ろ</p>\\n<p>旁边 隣 (となり)</p>","autoDesc":true}')},145:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>o});var t=s(641);const e=[(0,t.Fv)('<h1 id="表达" tabindex="-1"><a class="header-anchor" href="#表达"><span>表达</span></a></h1><h2 id="礼貌语言" tabindex="-1"><a class="header-anchor" href="#礼貌语言"><span>礼貌语言</span></a></h2><ol><li><p>方 (かた)</p><pre><code>人(ひと)--\\&gt;方(かた)\n</code></pre></li><li><p>询问年龄</p></li></ol><p>何 歳(さい) ですか</p><p>礼貌语言 おいくつですか</p><p>直接问孩子一般用 いくつ 或 何 歳</p><h2 id="どうぞ" tabindex="-1"><a class="header-anchor" href="#どうぞ"><span>どうぞ</span></a></h2><p>用于给对方物品，或劝对方进餐</p>',8)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/Japanese/bmabtgq2/","title":"表达","lang":"zh-CN","frontmatter":{"title":"表达","category":"日语","author":"MistyStar","createTime":"2024/05/07 16:28:29","permalink":"/Japanese/bmabtgq2/","description":"表达 礼貌语言 方 (かた) 询问年龄 何 歳(さい) ですか 礼貌语言 おいくつですか 直接问孩子一般用 いくつ 或 何 歳 どうぞ 用于给对方物品，或劝对方进餐","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/Japanese/bmabtgq2/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"表达"}],["meta",{"property":"og:description","content":"表达 礼貌语言 方 (かた) 询问年龄 何 歳(さい) ですか 礼貌语言 おいくつですか 直接问孩子一般用 いくつ 或 何 歳 どうぞ 用于给对方物品，或劝对方进餐"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"表达\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\"}]}"]]},"headers":[{"level":2,"title":"礼貌语言","slug":"礼貌语言","link":"#礼貌语言","children":[]},{"level":2,"title":"どうぞ","slug":"どうぞ","link":"#どうぞ","children":[]}],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":0.2,"words":60},"filePathRelative":"Japanese/表达.md","localizedDate":"2024年5月9日","excerpt":"\\n<h2>礼貌语言</h2>\\n<ol>\\n<li>\\n<p>方 (かた)</p>\\n<pre><code>人(ひと)--\\\\&gt;方(かた)\\n</code></pre>\\n</li>\\n<li>\\n<p>询问年龄</p>\\n</li>\\n</ol>\\n<p>何 歳(さい) ですか</p>\\n<p>礼貌语言 おいくつですか</p>\\n<p>直接问孩子一般用 いくつ  或 何 歳</p>\\n<h2>どうぞ</h2>\\n<p>用于给对方物品，或劝对方进餐</p>\\n","autoDesc":true}')},9582:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>o});var t=s(641);const e=[(0,t.Fv)('<h1 id="动词" tabindex="-1"><a class="header-anchor" href="#动词"><span>动词</span></a></h1><p>ます ました</p><p>ません ませんでした</p><p>去：行きます</p><p>来：来ます</p><p>回去，回来：帰（かえ）ります</p><p>买：買（か）い</p><p>做：し</p><p>吃：食（た）べ</p><p>学习：勉強（べんきょ）します</p><p>讨厌：嫌（きら）い</p><p>不讨厌：嫌いじゃない</p><p>喜欢：好（す）き</p><p>不喜欢：好きじゃない</p><p>来自：から</p>',15)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/Japanese/gxnnle9k/","title":"动词","lang":"zh-CN","frontmatter":{"title":"动词","category":"日语","author":"MistyStar","createTime":"2024/05/07 16:28:19","permalink":"/Japanese/gxnnle9k/","description":"动词 ます ました ません ませんでした 去：行きます 来：来ます 回去，回来：帰（かえ）ります 买：買（か）い 做：し 吃：食（た）べ 学习：勉強（べんきょ）します 讨厌：嫌（きら）い 不讨厌：嫌いじゃない 喜欢：好（す）き 不喜欢：好きじゃない 来自：から","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/Japanese/gxnnle9k/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"动词"}],["meta",{"property":"og:description","content":"动词 ます ました ません ませんでした 去：行きます 来：来ます 回去，回来：帰（かえ）ります 买：買（か）い 做：し 吃：食（た）べ 学习：勉強（べんきょ）します 讨厌：嫌（きら）い 不讨厌：嫌いじゃない 喜欢：好（す）き 不喜欢：好きじゃない 来自：から"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动词\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\"}]}"]]},"headers":[],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":0.17,"words":51},"filePathRelative":"Japanese/动词.md","localizedDate":"2024年5月9日","excerpt":"\\n<p>ます ました</p>\\n<p>ません ませんでした</p>\\n<p>去：行きます</p>\\n<p>来：来ます</p>\\n<p>回去，回来：帰（かえ）ります</p>\\n<p>买：買（か）い</p>\\n<p>做：し</p>\\n<p>吃：食（た）べ</p>\\n<p>学习：勉強（べんきょ）します</p>\\n<p>讨厌：嫌（きら）い</p>\\n<p>不讨厌：嫌いじゃない</p>\\n<p>喜欢：好（す）き</p>\\n<p>不喜欢：好きじゃない</p>\\n<p>来自：から</p>\\n","autoDesc":true}')},5783:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){const s=(0,t.g2)("Catalog");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s)])}]]),i=JSON.parse('{"path":"/Japanese/","title":"Japanese","lang":"zh-CN","frontmatter":{"title":"Japanese","article":false,"feed":false,"sitemap":false,"gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/Japanese/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"Japanese"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Japanese\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":1},"filePathRelative":null,"excerpt":""}')},2862:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>o});var t=s(641);const e=[(0,t.Fv)('<h1 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h1><h2 id="これ-それ-あれ-は-名です" tabindex="-1"><a class="header-anchor" href="#これ-それ-あれ-は-名です"><span><strong>これ/それ/あれ は 名です</strong></span></a></h2><p>指示事物的词。相当于汉语的“这、这个”“那、那个”。</p><p>其用法如下:</p><p><em>（1）说话人和听话人相隔一段距离，面对面时</em></p><p>■これ：距说话人较近的事物[说话人的范围、领域内的事物]</p><p>■それ:距听话人较近的事物[听话人的范围、领域内的事物】</p><p>■あれ：距说话人和听话人都比较远的事物[不属于任何一方范围、领域内的事物】</p><p><em>（2）说话人和听话人位于同一位置，面向同一方向时</em></p><p>■これ：距说话人、听话人较近的事物</p><p>■それ：距说话人、听话人较远的事物</p><p>■あれ ：距说话人、听话人更远的事物</p><h2 id="誰-だれ-どなた-何-なんなん-ですか" tabindex="-1"><a class="header-anchor" href="#誰-だれ-どなた-何-なんなん-ですか"><span><strong>誰 (だれ)/どなた/何 (なんなん) ですか</strong></span></a></h2><p>誰(だれ)--问是谁，比较礼貌的说法是比较礼貌的说法是どなた，用于上司长辈</p><p>何 (なん)--问何物</p><h2 id="名-の-名" tabindex="-1"><a class="header-anchor" href="#名-の-名"><span>名 の 名</span></a></h2><p>表示所属</p><h2 id="この-その-あの-名-は-名-です" tabindex="-1"><a class="header-anchor" href="#この-その-あの-名-は-名-です"><span>この/その/あの 名 は 名 です</span></a></h2><p>指示事物的所属关系</p><p>什么是谁的</p><h2 id="どれ-どの-名" tabindex="-1"><a class="header-anchor" href="#どれ-どの-名"><span>どれ/どの 名</span></a></h2><p>三个以上事物中，不能确定是哪一个所用的疑问词。</p><p>单独使用时用 どれ</p><p>修饰名词时用 どの</p><h2 id="名は-どこ-ですか" tabindex="-1"><a class="header-anchor" href="#名は-どこ-ですか"><span>名は どこ ですか</span></a></h2><p>询问存在场所</p><h2 id="ここ-そこ-あそこ-は-名-です" tabindex="-1"><a class="header-anchor" href="#ここ-そこ-あそこ-は-名-です"><span>ここ/そこ/あそこ は 名 です</span></a></h2><p>指示场所</p><h2 id="名-も-名-です" tabindex="-1"><a class="header-anchor" href="#名-も-名-です"><span>名 も 名 です</span></a></h2><p>助词も基本相当于 也</p><h2 id="から-まで" tabindex="-1"><a class="header-anchor" href="#から-まで"><span>...から...まで</span></a></h2><p>从......到.....</p>',32)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/Japanese/k3qztucn/","title":"语法","lang":"zh-CN","frontmatter":{"title":"语法","category":"日语","author":"MistyStar","createTime":"2024/05/07 16:27:52","permalink":"/Japanese/k3qztucn/","description":"语法 これ/それ/あれ は 名です 指示事物的词。相当于汉语的“这、这个”“那、那个”。 其用法如下: （1）说话人和听话人相隔一段距离，面对面时 ■これ：距说话人较近的事物[说话人的范围、领域内的事物] ■それ:距听话人较近的事物[听话人的范围、领域内的事物】 ■あれ：距说话人和听话人都比较远的事物[不属于任何一方范围、领域内的事物】 （2）说话人和...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/Japanese/k3qztucn/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"语法"}],["meta",{"property":"og:description","content":"语法 これ/それ/あれ は 名です 指示事物的词。相当于汉语的“这、这个”“那、那个”。 其用法如下: （1）说话人和听话人相隔一段距离，面对面时 ■これ：距说话人较近的事物[说话人的范围、领域内的事物] ■それ:距听话人较近的事物[听话人的范围、领域内的事物】 ■あれ：距说话人和听话人都比较远的事物[不属于任何一方范围、领域内的事物】 （2）说话人和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\"}]}"]]},"headers":[{"level":2,"title":"これ/それ/あれ は 名です","slug":"これ-それ-あれ-は-名です","link":"#これ-それ-あれ-は-名です","children":[]},{"level":2,"title":"誰 (だれ)/どなた/何 (なんなん)  ですか","slug":"誰-だれ-どなた-何-なんなん-ですか","link":"#誰-だれ-どなた-何-なんなん-ですか","children":[]},{"level":2,"title":"名 の 名","slug":"名-の-名","link":"#名-の-名","children":[]},{"level":2,"title":"この/その/あの 名 は 名 です","slug":"この-その-あの-名-は-名-です","link":"#この-その-あの-名-は-名-です","children":[]},{"level":2,"title":"どれ/どの 名","slug":"どれ-どの-名","link":"#どれ-どの-名","children":[]},{"level":2,"title":"名は どこ ですか","slug":"名は-どこ-ですか","link":"#名は-どこ-ですか","children":[]},{"level":2,"title":"ここ/そこ/あそこ は 名 です","slug":"ここ-そこ-あそこ-は-名-です","link":"#ここ-そこ-あそこ-は-名-です","children":[]},{"level":2,"title":"名 も 名 です","slug":"名-も-名-です","link":"#名-も-名-です","children":[]},{"level":2,"title":"...から...まで","slug":"から-まで","link":"#から-まで","children":[]}],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"Japanese/语法.md","localizedDate":"2024年5月9日","excerpt":"\\n<h2><strong>これ/それ/あれ は 名です</strong></h2>\\n<p>指示事物的词。相当于汉语的“这、这个”“那、那个”。</p>\\n<p>其用法如下:</p>\\n<p><em>（1）说话人和听话人相隔一段距离，面对面时</em></p>\\n<p>■これ：距说话人较近的事物[说话人的范围、领域内的事物]</p>\\n<p>■それ:距听话人较近的事物[听话人的范围、领域内的事物】</p>\\n<p>■あれ：距说话人和听话人都比较远的事物[不属于任何一方范围、领域内的事物】</p>\\n<p><em>（2）说话人和听话人位于同一位置，面向同一方向时</em></p>\\n<p>■これ：距说话人、听话人较近的事物</p>","autoDesc":true}')},2955:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>o});var t=s(641);const e=[(0,t.Lk)("h1",{id:"形容词",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#形容词"},[(0,t.Lk)("span",null,"形容词")])],-1),(0,t.Lk)("p",null,"（身体/精神）好 元気",-1)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/Japanese/ovayc8qw/","title":"形容词","lang":"zh-CN","frontmatter":{"title":"形容词","category":"日语","author":"MistyStar","createTime":"2024/05/07 16:28:37","permalink":"/Japanese/ovayc8qw/","description":"形容词 （身体/精神）好 元気","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/Japanese/ovayc8qw/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"形容词"}],["meta",{"property":"og:description","content":"形容词 （身体/精神）好 元気"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"形容词\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\"}]}"]]},"headers":[],"git":{"createdTime":1715266949000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":1}]},"readingTime":{"minutes":0.09,"words":27},"filePathRelative":"Japanese/形容词.md","localizedDate":"2024年5月9日","excerpt":"\\n<p>（身体/精神）好 元気</p>\\n","autoDesc":true}')},178:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>o});var t=s(641);const e=[(0,t.Fv)('<h1 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法"><span>排序算法</span></a></h1><table><thead><tr><th>排序方法</th><th></th><th>时间复杂度</th><th></th><th>空间复杂度</th><th>稳定性</th><th>代码复杂度</th></tr></thead><tbody><tr><td></td><td>最坏</td><td>平均</td><td>最好</td><td></td><td></td><td></td></tr><tr><td>冒泡排序</td><td>n^2</td><td>n^2</td><td>n</td><td>1</td><td>稳定</td><td>简单</td></tr><tr><td>直接选择排序</td><td>n^2</td><td>n^2</td><td>n^2</td><td>1</td><td>不稳定</td><td>简单</td></tr><tr><td>直接插入排序</td><td>n^2</td><td>n^2</td><td>n^2</td><td>1</td><td>稳定</td><td>简单</td></tr><tr><td>折半插入排序</td><td>n^2</td><td>n^2</td><td>n</td><td>1</td><td>稳定</td><td>简单</td></tr><tr><td>快速排序</td><td>n^2</td><td>nlogn</td><td>nlogn</td><td>平均logn,最坏n</td><td>不稳定</td><td>较复杂</td></tr><tr><td>堆排序</td><td>nlogn</td><td>nlogn</td><td>nlogn</td><td>1</td><td>不稳定</td><td>复杂</td></tr><tr><td>归并排序</td><td>nlogn</td><td>nlogn</td><td>nlogn</td><td>n</td><td>稳定</td><td>较复杂</td></tr></tbody></table><h2 id="low-b-三人组" tabindex="-1"><a class="header-anchor" href="#low-b-三人组"><span>Low B 三人组</span></a></h2><h3 id="冒泡算法-bubble-sort" tabindex="-1"><a class="header-anchor" href="#冒泡算法-bubble-sort"><span>冒泡算法（Bubble Sort）</span></a></h3><h4 id="文字描述" tabindex="-1"><a class="header-anchor" href="#文字描述"><span>文字描述</span></a></h4><p>冒泡排序（Bubble Sort）之所以被称为冒泡排序，是因为在排序过程中，较小的元素会像水中的气泡一样逐渐“冒”到数列的顶端。这个过程类似于水中气泡的上升，因此得名“冒泡排序”。排序时，通过重复比较和交换相邻元素的位置，就像气泡从水底升到水面一样，较小或较大的元素会逐步移动到数列的一端。</p><p>在具体实现中，冒泡排序会重复遍历要排序的数列，每次比较两个相邻的元素，如果它们的顺序错误就把它们交换过来。这个过程会一直重复，直到没有相邻元素需要交换，也就是数列完全有序为止。</p><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h4><h5 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void Bubble_sort(vector&lt;int&gt;&amp; arr)\n{\n    for(int i = 0;i &lt; arr.size()-1;i++)\n    {\n        bool exchange = false;\n        for(int j = 0;j &lt; arr.size()-1-i;j++)\n        {\n            if(arr[j]&gt;arr[j+1])\n            {\n                int temp = arr[j+1];\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n                exchange = true;\n            }\n        }\n        if(!exchange) break;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#第i趟</span>\n        exchange <span class="token operator">=</span> <span class="token boolean">False</span>\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                exchange <span class="token operator">=</span> <span class="token boolean">True</span>\n        <span class="token keyword">if</span> <span class="token keyword">not</span> exchange<span class="token punctuation">:</span>\n            <span class="token keyword">return</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h3><h4 id="文字描述-1" tabindex="-1"><a class="header-anchor" href="#文字描述-1"><span>文字描述</span></a></h4><p>选择排序是一种简单直观的排序算法。它的工作原理是这样的：首先在未排序的序列中找到最小（或最大）的元素，然后将其存放到排序序列的起始位置。接着，从剩余未排序的元素中继续寻找最小（或最大）的元素，然后放到已排序序列的末尾。这个过程会重复进行，直到所有元素都被排序。</p><p>在选择排序的每一轮中，你会从当前未排序的元素中选出最小（或最大）的一个，这就像是每次都“选择”出最小（或最大）的元素一样，因此得名“选择排序”。这个算法的时间复杂度是 O(n²)，所以当数据规模较小的时候使用它比较合适。</p><h4 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1"><span>代码实现</span></a></h4><h5 id="c-1" tabindex="-1"><a class="header-anchor" href="#c-1"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void select_sort(vector&lt;int&gt; &amp;arr)\n{\n    for(int i = 0;i &lt; arr.size();i++)\n    {\n        int min_loc = i;\n        for(int j = i+1;j &lt; arr.size();j++)\n        {\n            if(arr[j]&lt;arr[min_loc])\n                min_loc = j;\n        }\n        int temp = arr[i];\n        arr[i] = arr[min_loc];\n        arr[min_loc] = temp;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-1" tabindex="-1"><a class="header-anchor" href="#python-1"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># i是第几趟</span>\n        min_loc <span class="token operator">=</span> i\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>\n                min_loc <span class="token operator">=</span> j\n        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h3><h4 id="文字描述-2" tabindex="-1"><a class="header-anchor" href="#文字描述-2"><span>文字描述</span></a></h4><p>插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。这个过程就像我们整理手中的扑克牌，把每张新摸到的牌插入到适当的位置以保持手中的牌总是有序的。</p><p>具体的算法步骤如下：</p><ol><li>将第一个元素看作是一个有序的序列，剩下的所有元素为未排序的序列。</li><li>从未排序序列中取出一个元素，与已排序序列的元素从后向前进行比较。</li><li>如果已排序的元素大于新元素，将该元素移到下一位置。</li><li>重复步骤3，直到找到已排序的元素小于或等于新元素的位置。</li><li>将新元素插入到该位置后。</li><li>重复步骤2~5，直到未排序序列中的所有元素都被遍历。</li></ol><p>插入排序的平均和最坏时间复杂度都是 O(n²)，空间复杂度是 O(1)。它是一种稳定的排序算法，适合于小规模数据的排序或者大规模已经基本有序的数据排序。</p><h4 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2"><span>代码实现</span></a></h4><h5 id="c-2" tabindex="-1"><a class="header-anchor" href="#c-2"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void insert_sort(vector&lt;int&gt; &amp;arr)\n{\n    //i表示摸到的牌的下标\n    for(int i = 1;i &lt; arr.size();i++)\n    {\n        int key = arr[i]； \n        j = j-1;\t//j表示手里的牌的尾标\n        //手里的牌比摸到的牌大，向右腾位置\n        while(j &gt;= 0 &amp;&amp; arr[j] &gt; key)\n        {\n            arr[j+1] = arr[j];\n            j -= 1;\n        }\n        //插入摸到的牌\n        arr[j+1] = key;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-2" tabindex="-1"><a class="header-anchor" href="#python-2"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>\n        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">:</span>\n            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n            j <span class="token operator">-=</span> <span class="token number">1</span>\n        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key\n    <span class="token keyword">return</span> arr\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nb-三人组" tabindex="-1"><a class="header-anchor" href="#nb-三人组"><span>NB 三人组</span></a></h2><p>三者时间复杂度都是O(nlogn)</p><p>一般情况下的运行时间 快速排序&lt;归并排序&lt;堆排序</p><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h3><h4 id="文字描述-3" tabindex="-1"><a class="header-anchor" href="#文字描述-3"><span>文字描述</span></a></h4><p>快速排序是一种高效的排序算法，由C.R.A. Hoare在1962年提出。它的基本思想是采用分治法来对一组数据进行排序。快速排序的步骤如下：</p><ol><li>从数列中挑出一个元素，称为“基准”（pivot）。</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>快速排序的平均时间复杂度为 O(NlogN)，是一种非常高效的排序方法。它也有多种改进版本，例如随机选择基准数，或者在区间内数据较少时直接使用其他方法排序以减小递归深度。</p><h4 id="代码实现-3" tabindex="-1"><a class="header-anchor" href="#代码实现-3"><span>代码实现</span></a></h4><h5 id="c-3" tabindex="-1"><a class="header-anchor" href="#c-3"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int partition(vetor&lt;int&gt; &amp;arr,int left,int right)\n{\n    int pivot = arr[left];\n    while(left &lt; right)\n    {\n        while(left &lt; right &amp;&amp; arr[right] &gt;= pivot)\n            right -= 1;\n        arr[left] = arr[right];\n        \n        while(left &lt; right &amp;&amp; arr[left] &lt;= pivot)\n            left += 1;\n        arr[right] = arr[left];\n    }\n    arr[left] = pivot;\n    return left;\n}\n\n void quick_sort(vector&lt;int&gt; &amp;arr,int left,int right)\n {\n     if(left &lt; right)\n     {\n         int mid = partition(arr,left,right);\n         quick_sort(arr,left,mid-1);\n         quick_sort(arr,mid+1,right);\n     }\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-3" tabindex="-1"><a class="header-anchor" href="#python-3"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">//</span>原地排序版\n<span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    pivot <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span>\n    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>\n        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivot<span class="token punctuation">:</span> <span class="token comment">#从右面找比tmp小的数</span>\n            right <span class="token operator">-=</span> <span class="token number">1</span>      <span class="token comment"># 往左走一步</span>\n        li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token comment">#把右边的值写到左边空位上</span>\n\n        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>\n            left <span class="token operator">+=</span> <span class="token number">1</span>\t\t<span class="token comment"># 往右走一步</span>\n        li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">#把左边的值写到右边空位上</span>\n\n    li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot      <span class="token comment"># 把基准元素归位</span>\n    <span class="token keyword">return</span> left\t\t<span class="token comment"># 返回基准元素下标</span>\n\n\n<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>  <span class="token comment"># 至少两个元素</span>\n        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n        \n        \n<span class="token comment">#创建新列表版(数据量小时可用)</span>\n<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> li\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        pivot <span class="token operator">=</span> li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>\n        right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> pivot<span class="token punctuation">]</span>\n        <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h3><h4 id="文字描述-4" tabindex="-1"><a class="header-anchor" href="#文字描述-4"><span>文字描述</span></a></h4><h4 id="代码实现-4" tabindex="-1"><a class="header-anchor" href="#代码实现-4"><span>代码实现</span></a></h4><h5 id="c-4" tabindex="-1"><a class="header-anchor" href="#c-4"><span>C++</span></a></h5><h5 id="python-4" tabindex="-1"><a class="header-anchor" href="#python-4"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> li<span class="token punctuation">;</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>\n        left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>ls<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>\n    \n<span class="token comment"># 有序合并左右两列表</span>\n<span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment"># 下标置0</span>\n    i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>\n    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># 添加较小的数</span>\n        <span class="token keyword">if</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>\n            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>keft<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            i <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            j <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token comment">#添加剩余元素</span>\n        result <span class="token operator">+=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>\n        result <span class="token operator">+=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span>\n        <span class="token keyword">return</span> result\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h3><h4 id="文字描述-5" tabindex="-1"><a class="header-anchor" href="#文字描述-5"><span>文字描述</span></a></h4><p>堆排序（Heap Sort）是一种基于比较的排序算法，它利用堆这种数据结构的特性来进行排序。堆是一个近似完全二叉树的结构，并且满足堆的性质：每个节点的值都大于或等于其子节点的值（最大堆），或者每个节点的值都小于或等于其子节点的值（最小堆）。</p><p>堆排序的过程包括两个主要步骤：</p><ol><li>建立堆：将待排序的序列构造成一个最大堆（用于升序排列）或最小堆（用于降序排列）。</li><li>排序：不断移除堆顶元素（最大或最小值），并将其放到序列的尾部，然后重新调整剩余元素，使其满足堆的性质。</li></ol><p>堆排序的时间复杂度为 O(nlogn)，它是一种不稳定的排序算法，适合用于大数据量的排序。由于堆排序在排序过程中不需要额外的存储空间，因此它也是一种原地排序算法1</p><h4 id="代码实现-5" tabindex="-1"><a class="header-anchor" href="#代码实现-5"><span>代码实现</span></a></h4><h5 id="c-5" tabindex="-1"><a class="header-anchor" href="#c-5"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void heapify(vector&lt;int&gt; &amp;arr, int n,int i)\n{\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    \n    // 如果左子节点存在且大于根节点，则更新最大值\n    if(left &lt; n &amp;&amp; arr[i] &lt; arr[left])\n        largest = left;\n    \n    // 如果右子节点存在且大于当前最大值，则更新最大值\n    if(right &lt; n &amp;&amp; arr[i] &lt; arr[right])\n        largest = right;\n    \n    // 如果最大值不是根节点，交换它们，并继续堆化\n    if(largest != i)\n    {\n        swap(arr[i],arr[largest];\n        \n        heapify(arr,n,largest)\n    }\n    \n}\n\nvoid heap_sort(vector&lt;int&gt; &amp;arr)\n{\n    int n = arr.size();\n    \n    // 构建最大堆\n    for(int i = n/2 -1;i &gt;= 0;i --)\n        heapify(arr,n,i); \n    \n    // 一个个从堆顶取出元素\n    for(int i = n - 1;i &gt;= 0;i --)\n    {\n        swap(arr[i],arr[0]);\n        \n        heapify(arr,i,0);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-5" tabindex="-1"><a class="header-anchor" href="#python-5"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>\t\t<span class="token comment">#i为根节点下标</span>\n    largest <span class="token operator">=</span> i\n    left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>\t\t<span class="token comment">#左孩子</span>\n    right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>\t\t<span class="token comment">#右孩子</span>\n\n    <span class="token comment"># 如果左子节点存在且大于根节点，则更新最大值</span>\n    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>\n        largest <span class="token operator">=</span> left\n\n    <span class="token comment"># 如果右子节点存在且大于当前最大值，则更新最大值</span>\n    <span class="token keyword">if</span> right <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>\n        largest <span class="token operator">=</span> right\n\n    <span class="token comment"># 如果最大值不是根节点，交换它们，并继续堆化</span>\n    <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n\n    <span class="token comment"># 构建最大堆</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\n    <span class="token comment"># 一个个从堆顶取出元素</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 交换</span>\n        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><h4 id="top-k-问题" tabindex="-1"><a class="header-anchor" href="#top-k-问题"><span>Top k 问题</span></a></h4><p>取得前k大的数（部分有序）</p><h5 id="代码实现-6" tabindex="-1"><a class="header-anchor" href="#代码实现-6"><span>代码实现</span></a></h5><h5 id="c-6" tabindex="-1"><a class="header-anchor" href="#c-6"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void heapify(vector&lt;int&gt; &amp;arr, int n,int i)\n{\n    int smallest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    \n    // 如果左子节点存在且小于根节点，则更新最小值\n    if(left &lt; n &amp;&amp; arr[i] &gt; arr[left])\n        smallest = left;\n    \n    // 如果右子节点存在且小于当前最大值，则更新最小值\n    if(right &lt; n &amp;&amp; arr[i] &gt; arr[right])\n        smallest = right;\n    \n    // 如果最大值不是根节点，交换它们，并继续堆化\n    if(smallest != i)\n    {\n        swap(arr[i],arr[smallest];\n        heapify(arr,n,smallest)\n    }\n    \n}\n\nvector&lt;int&gt; top(vector&lt;int&gt; &amp;arr,k)\n{\n    // 构建大小为 k 的最小堆\n    vector&lt;int&gt; heap(arr.begin(),arr.begin() + k);\n    for (int i = k / 2 - 1; i &gt;= 0; --i) {\n        heapify(heap, k, i);\n    }\n\n    // 遍历数组中剩余的元素\n    for (int i = k; i &lt; arr.size(); ++i) {\n        if (arr[i] &gt; heap[0]) { // 如果当前元素大于堆顶元素\n            heap[0] = arr[i]; // 替换堆顶元素\n            heapify(heap, k, 0); // 重新堆化\n        }\n    }\n\n    return heap; // 返回包含前 k 个最大元素的堆\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-6" tabindex="-1"><a class="header-anchor" href="#python-6"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    smallest <span class="token operator">=</span> i  <span class="token comment"># 初始化最小元素为根节点</span>\n    left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 左子节点的索引</span>\n    right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>  <span class="token comment"># 右子节点的索引</span>\n\n    <span class="token comment"># 如果左子节点存在且小于根节点，则更新最小值</span>\n    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>\n        smallest <span class="token operator">=</span> left\n\n    <span class="token comment"># 如果右子节点存在且小于当前最小值，则更新最小值</span>\n    <span class="token keyword">if</span> right <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>\n        smallest <span class="token operator">=</span> right\n\n    <span class="token comment"># 如果最小值不是根节点，交换它们，并继续堆化</span>\n    <span class="token keyword">if</span> smallest <span class="token operator">!=</span> i<span class="token punctuation">:</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 交换</span>\n        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> smallest<span class="token punctuation">)</span>  <span class="token comment"># 递归地堆化子树</span>\n\n<span class="token keyword">def</span> <span class="token function">top_k_elements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 构建大小为 k 的最小堆</span>\n    heap <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">//</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        heapify<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\n    <span class="token comment"># 遍历数组中剩余的元素</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 如果当前元素大于堆顶元素</span>\n            heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 替换堆顶元素</span>\n            heapify<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 重新堆化</span>\n\n    <span class="token keyword">return</span> heap  <span class="token comment"># 返回包含前 k 个最大元素的堆</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><h2 id="其他排序" tabindex="-1"><a class="header-anchor" href="#其他排序"><span>其他排序</span></a></h2><h3 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序"><span>希尔排序</span></a></h3><h4 id="文字描述-6" tabindex="-1"><a class="header-anchor" href="#文字描述-6"><span>文字描述</span></a></h4><p>希尔排序（Shell Sort）是一种基于插入排序的改进算法（分组插入排序），也称为缩小增量排序。它的核心思想是将待排序的数组分割成若干个子序列，每个子序列由相隔一定间隔（称为增量）的元素组成，然后对每个子序列进行直接插入排序。随着排序的进行，增量逐渐减小，直到为1时，整个数组变成一个子序列，再进行一次直接插入排序，完成整个排序过程。</p><p>希尔排序的性能优于简单的插入排序，特别是对于大规模的数据排序。这是因为它通过先比较距离较远的元素，而不是相邻的元素，可以快速减少大量的无序情况，从而减少了后续插入排序的工作量。</p><p>希尔排序的时间复杂度与增量的选择有关，最坏情况下的时间复杂度为 (O(n^2))，但是对于某些特定的增量序列，时间复杂度可以降低到 (O(n^{1.5})) 或更低。希尔排序是一种不稳定的排序算法，因为在排序过程中可能会改变相等元素的相对位置。</p><h4 id="代码实现-7" tabindex="-1"><a class="header-anchor" href="#代码实现-7"><span>代码实现</span></a></h4><h5 id="c-7" tabindex="-1"><a class="header-anchor" href="#c-7"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void insert_sort_gap(vector&lt;int&gt; &amp;arr,int gap)\n{\n    for(int i = gap;i &lt; arr.size();i++)\n    {\n        int key = arr[i];\n        int j = i - gap;\n        \n        while(i &gt;= 0 &amp;&amp; arr[j] &gt; key)\n        {\n            arr[j + gap] = arr[j];\n            j -= gap;\n        }\n        arr[j + gap] = key;\n    }\n}\n\nvoid shell_sort(vector&lt;int&gt; &amp;arr)\n{\n    int d = arr.size() / 2;\n    while(d &gt;= 1)\n    {\n        insert_sort_gap(arr,d);\n        d /= 2;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-7" tabindex="-1"><a class="header-anchor" href="#python-7"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insert_sort_gap</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#i 表示摸到的牌的下标</span>\n        tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        j <span class="token operator">=</span> i <span class="token operator">-</span> gap <span class="token comment">#j指的是手里的牌的下标</span>\n        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> tmp<span class="token punctuation">:</span>\n            li<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n            j <span class="token operator">-=</span> gap\n        li<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> tmp\n\n<span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    d <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>\n    <span class="token keyword">while</span> d <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>\n        insert_sort_gap<span class="token punctuation">(</span>li<span class="token punctuation">,</span> d<span class="token punctuation">)</span>\n        d <span class="token operator">//=</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序"><span>桶排序</span></a></h3><h4 id="文字描述-7" tabindex="-1"><a class="header-anchor" href="#文字描述-7"><span>文字描述</span></a></h4><p>桶排序（Bucket Sort）是一种分布式排序算法，它通过将数组分到一定数量的有序的桶里，然后对每个桶内的元素进行排序，最后将各个桶中的元素依次取出，组成一个有序序列。桶排序适用于待排序数据值域较大但分布比较均匀的情况。</p><p>桶排序的基本步骤如下：</p><ol><li><strong>设置空桶</strong>：初始化一定数量的空桶。</li><li><strong>分配元素</strong>：遍历原始数组，根据某种映射关系，将元素分配到对应的桶中。</li><li><strong>桶内排序</strong>：对每个非空的桶进行排序，可以使用不同的排序算法，如快速排序或插入排序。</li><li><strong>合并桶</strong>：按顺序从非空桶中取出元素，放回原始数组，得到有序序列。</li></ol><p>桶排序的性能取决于数据的分布、桶的数量以及所使用的内部排序算法。在最佳情况下，当输入数据均匀分布时，桶排序的时间复杂度可以达到 (O(n+k))，其中 (n) 是元素数量，(k) 是桶的数量。桶排序是稳定的排序算法，因为它不会改变相同元素之间的相对顺序。</p><h4 id="代码实现-8" tabindex="-1"><a class="header-anchor" href="#代码实现-8"><span>代码实现</span></a></h4><h5 id="c-8" tabindex="-1"><a class="header-anchor" href="#c-8"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;vector&gt;\nvector&lt;int&gt; bucket_sort(vector&lt;int&gt;&amp; li, int n = 100, int max_num = 10000) {\n    vector&lt;vector&lt;int&gt;&gt; buckets(n, vector&lt;int&gt;());\n    \n    for (int var : li) {\n        int i = min(var / (max_num / n), n - 1);\n        buckets[i].push_back(var);\n        \n        for (int j = buckets[i].size() - 1; j &gt; 0; --j) {\n            if (buckets[i][j] &lt; buckets[i][j - 1]) {\n                swap(buckets[i][j], buckets[i][j - 1]);\n            } else {\n                break;\n            }\n        }\n    }\n    \n    vector&lt;int&gt; sorted_li;\n    for (const auto&amp; buc : buckets) {\n        sorted_li.insert(sorted_li.end(), buc.begin(), buc.end());\n    }\n    \n    return sorted_li;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-8" tabindex="-1"><a class="header-anchor" href="#python-8"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> max_num<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 创建桶</span>\n    <span class="token keyword">for</span> var <span class="token keyword">in</span> li<span class="token punctuation">:</span>\n        i <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>var <span class="token operator">//</span> <span class="token punctuation">(</span>max_num <span class="token operator">//</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># i 表示var放到几号桶里</span>\n        buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>var<span class="token punctuation">)</span> <span class="token comment"># 把var加到桶里边</span>\n        <span class="token comment"># 保持桶内的顺序</span>\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">if</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n                buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n            <span class="token keyword">else</span><span class="token punctuation">:</span>\n                <span class="token keyword">break</span>\n    sorted_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> buc <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>\n        sorted_li<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>buc<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> sorted_li\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序"><span>计数排序</span></a></h3><h4 id="文字描述-8" tabindex="-1"><a class="header-anchor" href="#文字描述-8"><span>文字描述</span></a></h4><p>计数排序（Counting Sort）是一种非比较排序算法，主要用于对一定范围内的整数进行排序。它的工作原理是通过计算每个元素的出现次数来确定每个元素的排序位置。计数排序算法特别适合于数据范围不大的场景，因为它的时间复杂度为 (O(n+k))，其中 (n) 是数组长度，(k) 是数据的范围。</p><p>计数排序的基本步骤包括：</p><ol><li><strong>找出待排序数组中的最大值</strong>。</li><li><strong>初始化计数数组</strong>，长度为最大值加一，所有计数初始化为0。</li><li><strong>遍历原始数组</strong>，根据数组元素的值作为计数数组的索引，对应计数加一。</li><li><strong>累加计数数组</strong>，使每个元素的计数等于自身及之前所有计数的总和。</li><li><strong>反向填充目标数组</strong>，根据计数数组中的位置信息，将原始数组中的元素放置到正确的位置上。</li></ol><p>计数排序是稳定的排序算法，因为相同的元素在排序后会保持它们原始的顺序。但是，如果数据范围 (k) 远大于元素个数 (n)，则计数排序可能不太适用，因为它需要创建一个很大的计数数组，这可能会导致空间浪费。</p><h4 id="代码实现-9" tabindex="-1"><a class="header-anchor" href="#代码实现-9"><span>代码实现</span></a></h4><h5 id="c-9" tabindex="-1"><a class="header-anchor" href="#c-9"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;vector&gt;\nusing namespace std;\nvoid count_sort(vector&lt;int&gt;&amp; li, int max_count = 100) {\n    vector&lt;int&gt; count(max_count + 1, 0);\n    for (int val : li) {\n        count[val]++;\n    }\n    li.clear();\n    for (int ind = 0; ind &lt;= max_count; ind++) {\n        for (int i = 0; i &lt; count[ind]; i++) {\n            li.push_back(ind);\n        }\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-9" tabindex="-1"><a class="header-anchor" href="#python-9"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> max_count<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> val <span class="token keyword">in</span> li<span class="token punctuation">:</span>\n        count<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>\n    li<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> ind<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ind<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序"><span>基数排序</span></a></h3><h4 id="文字描述-9" tabindex="-1"><a class="header-anchor" href="#文字描述-9"><span>文字描述</span></a></h4><p>基数排序（Radix Sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。基数排序有两种方法：最低位优先（LSD）和最高位优先（MSD）。</p><ol><li><strong>LSD（Least Significant Digit first）</strong>：从最低位开始进行排序，适用于位数较短的整数排序。</li><li><strong>MSD（Most Significant Digit first）</strong>：从最高位开始进行排序，适用于位数较长的字符串排序或其他需要考虑高位优先的场景。</li></ol><p>基数排序的步骤通常如下：</p><ul><li>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。</li><li>从最低位或最高位开始，依次进行一次排序。</li><li>按照每个位数进行排序，可以使用计数排序或桶排序作为子过程。</li><li>从最低位排序一直到最高位排序完成以后，数列就变成了一个有序序列。</li></ul><p>基数排序的时间复杂度为 (O(k \\cdot N))，其中 (k) 是数字的最大位数，(N) 是排序元素的个数。空间复杂度为 (O(k + N))，并且基数排序是稳定的排序算法。</p><h4 id="代码实现-10" tabindex="-1"><a class="header-anchor" href="#代码实现-10"><span>代码实现</span></a></h4><h5 id="c-10" tabindex="-1"><a class="header-anchor" href="#c-10"><span>C++</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;vector&gt;\nvoid radix_sort(vector&lt;int&gt;&amp; li) {\n    int max_num = *max_element(li.begin(), li.end());\n    int it = 0;\n    while (pow(10, it) &lt;= max_num) {\n        vector&lt;vector&lt;int&gt;&gt; buckets(10, vector&lt;int&gt;());\n        for (int var : li) {\n            int digit = (var / (int)pow(10, it)) % 10;\n            buckets[digit].push_back(var);\n        }\n        li.clear();\n        for (const auto&amp; buc : buckets) {\n            li.insert(li.end(), buc.begin(), buc.end());\n        }\n        it++;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="python-10" tabindex="-1"><a class="header-anchor" href="#python-10"><span>Python</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    max_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token comment"># 最大值 9-&gt;1, 99-&gt;2, 888-&gt;3, 10000-&gt;5</span>\n    it <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">while</span> <span class="token number">10</span> <span class="token operator">**</span> it <span class="token operator">&lt;=</span> max_num<span class="token punctuation">:</span>\n        buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n        <span class="token keyword">for</span> var <span class="token keyword">in</span> li<span class="token punctuation">:</span>\n            <span class="token comment"># 987 it=1  987//10-&gt;98 98%10-&gt;8;    it=2  987//100-&gt;9 9%10=9</span>\n            digit <span class="token operator">=</span> <span class="token punctuation">(</span>var <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">**</span> it<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>\n            buckets<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>var<span class="token punctuation">)</span>\n        <span class="token comment"># 分桶完成</span>\n        li<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">for</span> buc <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>\n            li<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>buc<span class="token punctuation">)</span>\n        <span class="token comment"># 把数重新写回li</span>\n        it <span class="token operator">+=</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',116)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/algorithm/1hou4df3/","title":"排序算法","lang":"zh-CN","frontmatter":{"title":"排序算法","star":true,"category":"算法","author":"MistyStar","createTime":"2024/03/22 10:23:17","permalink":"/algorithm/1hou4df3/","description":"排序算法 Low B 三人组 冒泡算法（Bubble Sort） 文字描述 冒泡排序（Bubble Sort）之所以被称为冒泡排序，是因为在排序过程中，较小的元素会像水中的气泡一样逐渐“冒”到数列的顶端。这个过程类似于水中气泡的上升，因此得名“冒泡排序”。排序时，通过重复比较和交换相邻元素的位置，就像气泡从水底升到水面一样，较小或较大的元素会逐步移动到...","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/algorithm/1hou4df3/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"排序算法"}],["meta",{"property":"og:description","content":"排序算法 Low B 三人组 冒泡算法（Bubble Sort） 文字描述 冒泡排序（Bubble Sort）之所以被称为冒泡排序，是因为在排序过程中，较小的元素会像水中的气泡一样逐渐“冒”到数列的顶端。这个过程类似于水中气泡的上升，因此得名“冒泡排序”。排序时，通过重复比较和交换相邻元素的位置，就像气泡从水底升到水面一样，较小或较大的元素会逐步移动到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:18:59.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:18:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-09T15:18:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MistyStar\\"}]}"]]},"headers":[{"level":2,"title":"Low B 三人组","slug":"low-b-三人组","link":"#low-b-三人组","children":[{"level":3,"title":"冒泡算法（Bubble Sort）","slug":"冒泡算法-bubble-sort","link":"#冒泡算法-bubble-sort","children":[]},{"level":3,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[]},{"level":3,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]}]},{"level":2,"title":"NB 三人组","slug":"nb-三人组","link":"#nb-三人组","children":[{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":3,"title":"堆排序","slug":"堆排序","link":"#堆排序","children":[]}]},{"level":2,"title":"其他排序","slug":"其他排序","link":"#其他排序","children":[{"level":3,"title":"希尔排序","slug":"希尔排序","link":"#希尔排序","children":[]},{"level":3,"title":"桶排序","slug":"桶排序","link":"#桶排序","children":[]},{"level":3,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[]},{"level":3,"title":"基数排序","slug":"基数排序","link":"#基数排序","children":[]}]}],"git":{"createdTime":1715266949000,"updatedTime":1715267939000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":3}]},"readingTime":{"minutes":16.41,"words":4923},"filePathRelative":"algorithm/排序算法.md","localizedDate":"2024年5月9日","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th>排序方法</th>\\n<th></th>\\n<th>时间复杂度</th>\\n<th></th>\\n<th>空间复杂度</th>\\n<th>稳定性</th>\\n<th>代码复杂度</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td></td>\\n<td>最坏</td>\\n<td>平均</td>\\n<td>最好</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>冒泡排序</td>\\n<td>n^2</td>\\n<td>n^2</td>\\n<td>n</td>\\n<td>1</td>\\n<td>稳定</td>\\n<td>简单</td>\\n</tr>\\n<tr>\\n<td>直接选择排序</td>\\n<td>n^2</td>\\n<td>n^2</td>\\n<td>n^2</td>\\n<td>1</td>\\n<td>不稳定</td>\\n<td>简单</td>\\n</tr>\\n<tr>\\n<td>直接插入排序</td>\\n<td>n^2</td>\\n<td>n^2</td>\\n<td>n^2</td>\\n<td>1</td>\\n<td>稳定</td>\\n<td>简单</td>\\n</tr>\\n<tr>\\n<td>折半插入排序</td>\\n<td>n^2</td>\\n<td>n^2</td>\\n<td>n</td>\\n<td>1</td>\\n<td>稳定</td>\\n<td>简单</td>\\n</tr>\\n<tr>\\n<td>快速排序</td>\\n<td>n^2</td>\\n<td>nlogn</td>\\n<td>nlogn</td>\\n<td>平均logn,最坏n</td>\\n<td>不稳定</td>\\n<td>较复杂</td>\\n</tr>\\n<tr>\\n<td>堆排序</td>\\n<td>nlogn</td>\\n<td>nlogn</td>\\n<td>nlogn</td>\\n<td>1</td>\\n<td>不稳定</td>\\n<td>复杂</td>\\n</tr>\\n<tr>\\n<td>归并排序</td>\\n<td>nlogn</td>\\n<td>nlogn</td>\\n<td>nlogn</td>\\n<td>n</td>\\n<td>稳定</td>\\n<td>较复杂</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')},5147:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){const s=(0,t.g2)("Catalog");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s)])}]]),i=JSON.parse('{"path":"/algorithm/","title":"Algorithm","lang":"zh-CN","frontmatter":{"title":"Algorithm","article":false,"feed":false,"sitemap":false,"gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/algorithm/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"Algorithm"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Algorithm\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":1},"filePathRelative":null,"excerpt":""}')},9574:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/article/","title":"文章","lang":"zh-CN","frontmatter":{"title":"文章","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"type","key":"article"},"layout":"BlogType","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/article/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"文章"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"文章\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},905:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/category/","title":"分类","lang":"zh-CN","frontmatter":{"title":"分类","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"category","key":"category"},"layout":"BlogCategory","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/category/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"分类"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"分类\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},4170:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"数据结构 分类","lang":"zh-CN","frontmatter":{"title":"数据结构 分类","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"category","name":"数据结构","key":"category"},"layout":"BlogCategory","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"数据结构 分类"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据结构 分类\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},8304:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/category/%E6%97%A5%E8%AF%AD/","title":"日语 分类","lang":"zh-CN","frontmatter":{"title":"日语 分类","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"category","name":"日语","key":"category"},"layout":"BlogCategory","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/category/%E6%97%A5%E8%AF%AD/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"日语 分类"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"日语 分类\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},7102:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/category/%E7%AE%97%E6%B3%95/","title":"算法 分类","lang":"zh-CN","frontmatter":{"title":"算法 分类","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"category","name":"算法","key":"category"},"layout":"BlogCategory","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/category/%E7%AE%97%E6%B3%95/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"算法 分类"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"算法 分类\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},4689:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){const s=(0,t.g2)("Catalog");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s)])}]]),i=JSON.parse('{"path":"/datastruc/","title":"Datastruc","lang":"zh-CN","frontmatter":{"title":"Datastruc","article":false,"feed":false,"sitemap":false,"gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/datastruc/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"Datastruc"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Datastruc\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":1},"filePathRelative":null,"excerpt":""}')},4298:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/","title":"Mistyの小屋","lang":"zh-CN","frontmatter":{"home":true,"layout":"BlogHome","icon":"home","title":"Mistyの小屋","bgImage":"BG-Asuka.png","heroText":"Misty的小屋","heroFullScreen":true,"tagline":"似缥缈星辰，窥浩瀚寰宇","projects":[{"icon":"project","name":"算法","desc":"Algorithm","link":"/algorithm/"},{"icon":"link","name":"数据结构","desc":"Datastructure","link":"/datastruc/"},{"icon":"book","name":"网络安全","desc":"CyberSecurity","link":"/cyber/"},{"icon":"article","name":"日语","desc":"Japanese","link":"/Japanese/"},{"icon":"article","name":"英语","desc":"English","link":"/English/"},{"icon":"friend","name":"友情链接-桜吹","desc":"Cherryblowing","link":"https://mdkiid.github.io/"}],"footer":"MistyStar\'s Blog","head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"Mistyの小屋"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T15:02:29.000Z"}],["meta",{"property":"article:author","content":"MistyStar"}],["meta",{"property":"article:modified_time","content":"2024-05-09T15:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Mistyの小屋\\"}"]]},"headers":[],"git":{"createdTime":1715177675000,"updatedTime":1715266949000,"contributors":[{"name":"Misty-Star","email":"1278734874@qq.com","commits":2}]},"readingTime":{"minutes":0.33,"words":99},"filePathRelative":"README.md","localizedDate":"2024年5月8日","excerpt":""}')},3639:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/star/","title":"星标","lang":"zh-CN","frontmatter":{"title":"星标","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"type","key":"star"},"layout":"BlogType","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/star/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"星标"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"星标\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},4103:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/tag/","title":"标签","lang":"zh-CN","frontmatter":{"title":"标签","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"category","key":"tag"},"layout":"BlogCategory","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/tag/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"标签"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"标签\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')},3931:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>i});var t=s(641);const e={},p=(0,s(6262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div")}]]),i=JSON.parse('{"path":"/timeline/","title":"时间轴","lang":"zh-CN","frontmatter":{"title":"时间轴","dir":{"index":false},"index":false,"feed":false,"sitemap":false,"blog":{"type":"type","key":"timeline"},"layout":"Timeline","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://Misty-Star.github.io/timeline/"}],["meta",{"property":"og:site_name","content":"MistyStar"}],["meta",{"property":"og:title","content":"时间轴"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"MistyStar"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"时间轴\\"}"]]},"headers":[],"git":{},"readingTime":{"minutes":0,"words":0},"filePathRelative":null,"excerpt":""}')}}]);